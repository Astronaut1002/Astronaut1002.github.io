<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爱心特效 html文件直接启动</title>
    <link href="/2023/03/30/%E7%88%B1%E5%BF%83%E7%89%B9%E6%95%88/"/>
    <url>/2023/03/30/%E7%88%B1%E5%BF%83%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">HTML</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">HEAD</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">TITLE</span>&gt;</span> New Document <span class="hljs-tag">&lt;/<span class="hljs-name">TITLE</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;Generator&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;EditPlus&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;Keywords&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">META</span> <span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;Description&quot;</span> <span class="hljs-attr">CONTENT</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#000</span>;</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">canvas</span> &#123;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"></span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">HEAD</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">BODY</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pinkboard&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* Settings</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> settings = &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">particles</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">length</span>: <span class="hljs-number">500</span>, <span class="hljs-comment">// maximum amount of particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">duration</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// particle duration in sec</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">velocity</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// particle velocity in pixels/sec</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">effect</span>: -<span class="hljs-number">0.75</span>, <span class="hljs-comment">// play with this for a nice effect</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">size</span>: <span class="hljs-number">30</span>, <span class="hljs-comment">// particle size in pixels</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* RequestAnimationFrame polyfill by Erik Möller</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> b=<span class="hljs-number">0</span>;<span class="hljs-keyword">var</span> c=[<span class="hljs-string">&quot;ms&quot;</span>,<span class="hljs-string">&quot;moz&quot;</span>,<span class="hljs-string">&quot;webkit&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>];<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> a=<span class="hljs-number">0</span>;a&lt;c.<span class="hljs-property">length</span>&amp;&amp;!<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>;++a)&#123;<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-variable language_">window</span>[c[a]+<span class="hljs-string">&quot;RequestAnimationFrame&quot;</span>];<span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span>=<span class="hljs-variable language_">window</span>[c[a]+<span class="hljs-string">&quot;CancelAnimationFrame&quot;</span>]||<span class="hljs-variable language_">window</span>[c[a]+<span class="hljs-string">&quot;CancelRequestAnimationFrame&quot;</span>]&#125;<span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>)&#123;<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">h,e</span>)&#123;<span class="hljs-keyword">var</span> d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<span class="hljs-keyword">var</span> f=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>-(d-b));<span class="hljs-keyword">var</span> g=<span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">h</span>(d+f)&#125;,f);b=d+f;<span class="hljs-keyword">return</span> g&#125;&#125;<span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span>)&#123;<span class="hljs-variable language_">window</span>.<span class="hljs-property">cancelAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>)&#123;<span class="hljs-built_in">clearTimeout</span>(d)&#125;&#125;&#125;());</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* Point class</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Point</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Point</span>(<span class="hljs-params">x, y</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = (<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">&#x27;undefined&#x27;</span>) ? x : <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = (<span class="hljs-keyword">typeof</span> y !== <span class="hljs-string">&#x27;undefined&#x27;</span>) ? y : <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">clone</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">length</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">length</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> length == <span class="hljs-string">&#x27;undefined&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">normalize</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> *= length;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> *= length;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">normalize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> length = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">length</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> /= length;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> /= length;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Point</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* Particle class</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Particle</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Particle</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">acceleration</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Particle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">initialize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y, dx, dy</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = x;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = y;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">x</span> = dx;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">y</span> = dy;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">acceleration</span>.<span class="hljs-property">x</span> = dx * settings.<span class="hljs-property">particles</span>.<span class="hljs-property">effect</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">acceleration</span>.<span class="hljs-property">y</span> = dy * settings.<span class="hljs-property">particles</span>.<span class="hljs-property">effect</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Particle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">deltaTime</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">x</span> * deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">y</span> * deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">x</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">acceleration</span>.<span class="hljs-property">x</span> * deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">velocity</span>.<span class="hljs-property">y</span> += <span class="hljs-variable language_">this</span>.<span class="hljs-property">acceleration</span>.<span class="hljs-property">y</span> * deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> += deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">Particle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, image</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ease</span>(<span class="hljs-params">t</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> (--t) * t * t + <span class="hljs-number">1</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> size = image.<span class="hljs-property">width</span> * <span class="hljs-title function_">ease</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> / settings.<span class="hljs-property">particles</span>.<span class="hljs-property">duration</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-property">globalAlpha</span> = <span class="hljs-number">1</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> / settings.<span class="hljs-property">particles</span>.<span class="hljs-property">duration</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">drawImage</span>(image, <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> - size / <span class="hljs-number">2</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> - size / <span class="hljs-number">2</span>, size, size);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Particle</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)();</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* ParticlePool class</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">ParticlePool</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> particles,</span><br><span class="language-javascript"></span><br><span class="language-javascript">firstActive = <span class="hljs-number">0</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">firstFree = <span class="hljs-number">0</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">duration = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">duration</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ParticlePool</span>(<span class="hljs-params">length</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// create and populate particle pool</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">particles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(length);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; particles.<span class="hljs-property">length</span>; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Particle</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">ParticlePool</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">x, y, dx, dy</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[firstFree].<span class="hljs-title function_">initialize</span>(x, y, dx, dy);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// handle circular queue</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">firstFree++;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstFree == particles.<span class="hljs-property">length</span>) firstFree = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstActive == firstFree ) firstActive++;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstActive == particles.<span class="hljs-property">length</span>) firstActive = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">ParticlePool</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">deltaTime</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> i;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// update active particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstActive &lt; firstFree) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = firstActive; i &lt; firstFree; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">update</span>(deltaTime);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstFree &lt; firstActive) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = firstActive; i &lt; particles.<span class="hljs-property">length</span>; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">update</span>(deltaTime);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; firstFree; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">update</span>(deltaTime);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// remove inactive particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">while</span> (particles[firstActive].<span class="hljs-property">age</span> &gt;= duration &amp;&amp; firstActive != firstFree) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">firstActive++;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstActive == particles.<span class="hljs-property">length</span>) firstActive = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title class_">ParticlePool</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, image</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// draw active particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstActive &lt; firstFree) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = firstActive; i &lt; firstFree; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">draw</span>(context, image);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (firstFree &lt; firstActive) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = firstActive; i &lt; particles.<span class="hljs-property">length</span>; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">draw</span>(context, image);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; firstFree; i++)</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles[i].<span class="hljs-title function_">draw</span>(context, image);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">ParticlePool</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">* Putting it all together</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params">canvas</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>),</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParticlePool</span>(settings.<span class="hljs-property">particles</span>.<span class="hljs-property">length</span>),</span><br><span class="language-javascript"></span><br><span class="language-javascript">particleRate = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">length</span> / settings.<span class="hljs-property">particles</span>.<span class="hljs-property">duration</span>, <span class="hljs-comment">// particles/sec</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">time;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// get point on heart with -PI &lt;= t &lt;= PI</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">pointOnHeart</span>(<span class="hljs-params">t</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-number">160</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(t), <span class="hljs-number">3</span>),</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-number">130</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(t) - <span class="hljs-number">50</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">2</span> * t) - <span class="hljs-number">20</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">3</span> * t) - <span class="hljs-number">10</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">4</span> * t) + <span class="hljs-number">25</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// creating the particle image using a dummy canvas</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> image = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>),</span><br><span class="language-javascript"></span><br><span class="language-javascript">context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">canvas.<span class="hljs-property">width</span> = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">canvas.<span class="hljs-property">height</span> = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// helper function to create the path</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">to</span>(<span class="hljs-params">t</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> point = <span class="hljs-title function_">pointOnHeart</span>(t);</span><br><span class="language-javascript"></span><br><span class="language-javascript">point.<span class="hljs-property">x</span> = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span> / <span class="hljs-number">2</span> + point.<span class="hljs-property">x</span> * settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span> / <span class="hljs-number">350</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">point.<span class="hljs-property">y</span> = settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span> / <span class="hljs-number">2</span> - point.<span class="hljs-property">y</span> * settings.<span class="hljs-property">particles</span>.<span class="hljs-property">size</span> / <span class="hljs-number">350</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> point;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// create the path</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">beginPath</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> t = -<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> point = <span class="hljs-title function_">to</span>(t);</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">moveTo</span>(point.<span class="hljs-property">x</span>, point.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">while</span> (t &lt; <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">t += <span class="hljs-number">0.01</span>; <span class="hljs-comment">// baby steps!</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">point = <span class="hljs-title function_">to</span>(t);</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">lineTo</span>(point.<span class="hljs-property">x</span>, point.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">closePath</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// create the fill</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#ea80b0&#x27;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">fill</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// create the image</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">image.<span class="hljs-property">src</span> = canvas.<span class="hljs-title function_">toDataURL</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">return</span> image;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// render that thing!</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// next animation frame</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">requestAnimationFrame</span>(render);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// update time</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> newTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() / <span class="hljs-number">1000</span>,</span><br><span class="language-javascript"></span><br><span class="language-javascript">deltaTime = newTime - (time || newTime);</span><br><span class="language-javascript"></span><br><span class="language-javascript">time = newTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// clear canvas</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">context.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// create new particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> amount = particleRate * deltaTime;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; amount; i++) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> pos = <span class="hljs-title function_">pointOnHeart</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> - <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> dir = pos.<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">length</span>(settings.<span class="hljs-property">particles</span>.<span class="hljs-property">velocity</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles.<span class="hljs-title function_">add</span>(canvas.<span class="hljs-property">width</span> / <span class="hljs-number">2</span> + pos.<span class="hljs-property">x</span>, canvas.<span class="hljs-property">height</span> / <span class="hljs-number">2</span> - pos.<span class="hljs-property">y</span>, dir.<span class="hljs-property">x</span>, -dir.<span class="hljs-property">y</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// update and draw particles</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">particles.<span class="hljs-title function_">update</span>(deltaTime);</span><br><span class="language-javascript"></span><br><span class="language-javascript">particles.<span class="hljs-title function_">draw</span>(context, image);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// handle (re-)sizing of the canvas</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onResize</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">canvas.<span class="hljs-property">width</span> = canvas.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">canvas.<span class="hljs-property">height</span> = canvas.<span class="hljs-property">clientHeight</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = onResize;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// delay rendering bootstrap</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onResize</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">render</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;, <span class="hljs-number">10</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;pinkboard&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">BODY</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">HTML</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React</title>
    <link href="/2023/03/30/learnReact/"/>
    <url>/2023/03/30/learnReact/</url>
    
    <content type="html"><![CDATA[<h1 id="学习React"><a href="#学习React" class="headerlink" title="学习React"></a>学习React</h1><ul><li>什么是React?<br>用于构建用户界面的JS库<br>react只关注视图（也就是页面）<br>AIA：是一个将数据渲染为HTML视图的开源JS库,感觉像是程序员和DOM之间的代理</li><li>步骤</li></ul><ol><li>发送请求获取数据</li><li>处理数据(过滤、整理格式)</li><li>操作DOM呈现页面</li></ol><ul><li>谁开发的？<br>由Facebook开发，且开源<br>软件工程师Jorda Walke创建</li><li>为什么用react</li></ul><ol><li>原生js操作DOM繁琐、效率低</li><li>使用JS直接操作DOM， 浏览器会进行大量的重绘重排</li><li>原生没有组件化编码方案，代码复用率低</li></ol><ul><li>React特点</li></ul><ol><li>采用组件化模式、声明式编码，提高开发效率及组件复用率</li><li>在React Native中可以使用React语法进行移动端开发</li><li>使用虚拟DOM+Diffing算法，减少与真实DOM交互</li></ol><ul><li>依赖包</li></ul><ol><li>babel.min.js (es6-&gt;es5  jsx-&gt;js)</li><li>react.development.js(react核心库)</li><li>react-dom.development(react扩展库)</li></ol><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="虚拟DOM的两种创建方式"><a href="#虚拟DOM的两种创建方式" class="headerlink" title="虚拟DOM的两种创建方式"></a>虚拟DOM的两种创建方式</h3><ol><li>使用jsx创建虚拟虚拟DOM</li></ol><ul><li>格式<br>引入react核心库<br>引入react-dom,用于支持react操作DOM<br>引入babel</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 表示里面写jsx</span></span><br><span class="language-javascript"><span class="hljs-comment">// 1. 创建虚拟DOM</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello React<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-comment">// 此处不要写引号 因为不是字符串</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TDOM</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// 2. 渲染虚拟DOM到页面</span></span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用js创建虚拟DOM</li></ol><ul><li>格式<br>引入react核心库<br>引入react-dom,用于支持react操作DOM</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 表示里面写jsx</span></span><br><span class="language-javascript"><span class="hljs-comment">// 1. 创建虚拟DOM</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createlement</span>(标签名,标签属性,标签内容)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createlement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,<span class="hljs-string">&#x27;Hello React&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TDOM</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// 2. 渲染虚拟DOM到页面</span></span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;test&quot;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="关于虚拟DOM"><a href="#关于虚拟DOM" class="headerlink" title="关于虚拟DOM"></a>关于虚拟DOM</h3><ol><li>console.log(VDOM instanceof Object) 本质是 Object 类型的对象</li><li>虚拟DOM比较”轻”，属性少。因为虚拟DOM是react内部在用，无需真实DOM那么多的属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;虚拟DOM&#x27;</span>,<span class="hljs-variable constant_">VDOM</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;真实DOM&#x27;</span>,<span class="hljs-variable constant_">TDOM</span>)  <span class="hljs-comment">// 输出&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;，没法看属性</span><br><span class="hljs-keyword">debugger</span> <span class="hljs-comment">// 借助断点来看有多少属性</span><br></code></pre></td></tr></table></figure><ol start="3"><li>虚拟DOM最终会被React转化为真实DOM，呈现在页面上</li></ol><h2 id="JSX简介"><a href="#JSX简介" class="headerlink" title="JSX简介"></a>JSX简介</h2><p>全称:javascript XML<br>是一个 JavaScript 的语法扩展。在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p><h3 id="为什么使用JSX？"><a href="#为什么使用JSX？" class="headerlink" title="为什么使用JSX？"></a>为什么使用JSX？</h3><p>React 认为渲染逻辑本质上与其他UI逻辑内在耦合，比如<br>上述例子若是在h1标签中再加一个span标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// jsx:</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello React<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>)<br><br><span class="hljs-comment">// js:</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createlement</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;title&#x27;</span>&#125;,<span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="hljs-string">&#x27;Hello React&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="BTW——XML"><a href="#BTW——XML" class="headerlink" title="BTW——XML"></a>BTW——XML</h4><p>早期用于存储和传输数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 用json存储  json&#123;&#125;存储对象 js对象存储为json字符串--&gt;</span><br>&#123;&quot;name&quot;:&#x27;Tom&#x27;,&quot;age&quot;:19&#125;<br></code></pre></td></tr></table></figure><h4 id="BTW——json"><a href="#BTW——json" class="headerlink" title="BTW——json"></a>BTW——json</h4><ol><li>parse方法</li><li>stringify方法<h3 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则"></a>jsx语法规则</h3></li><li>定义虚拟DOM时不要写引号</li><li>标签中混入js表达式时用{}，myId，myData<br>[注意]区分js表达式 和 js语句（代码）</li></ol><ul><li>表达式一定会产生一个值，可以放在任何一个需要值的地方<br>下面这些都是表达式 :<br>  .a,<br>  .a+b<br>  .demo(1)<br>  arr.map(() =&gt; {return})<br>  function test() {}</li><li>语句(代码)<br>下面这些都是语句(代码)<br>  .if()<br>  .for()<br>  .switch() {case:xxx}</li></ul><ol start="3"><li>样式的类名指定不要用class，要用className</li><li>内联样式要用,style=两个大括号，里面写key:value的形式 去写<br>比如两个大括号，中间写color:’white’</li><li>虚拟DOM，只有一个根标签  在这个例子中所有东西都放h2里</li><li>标签必须闭合</li><li>标签首字母<br> （1）若小写字母开头，则将该标签转为html同名元素，若html中无该标签对应同名元素，则报错<br> （2）若大写字母开头，react就去渲染对应组件，若组件没有定义，则报错</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>:skyblue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> myId = <span class="hljs-string">&#x27;ALin&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> myData = <span class="hljs-string">&#x27;suibian&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建虚拟DOM</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (</span><br><span class="language-javascript">            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myId.toLowerCase()&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;myData.toLowerCase()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">        )</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染虚拟DOM</span></span><br><span class="language-javascript">        <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="hljs-variable constant_">VDOM</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例子：渲染数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> data = [<span class="hljs-string">&#x27;Angular&#x27;</span>,<span class="hljs-string">&#x27;React&#x27;</span>,<span class="hljs-string">&#x27;Vue&#x27;</span>]</span><br><span class="language-javascript"><span class="hljs-comment">// 1.创建虚拟DOM</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">VDOM</span> = (</span><br><span class="language-javascript">    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>前端js框架列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">            &#123;</span></span><br><span class="language-xml"><span class="language-javascript">                data.map((item,index) =&gt;&#123;</span></span><br><span class="language-xml"><span class="language-javascript">                    return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    // 这样写少了key值，可以暂时用index来代替，但最好还是用id，因为index会变化</span></span><br><span class="language-xml"><span class="language-javascript">                &#125;)</span></span><br><span class="language-xml"><span class="language-javascript">            &#125;</span></span><br><span class="language-xml"><span class="language-javascript">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="模块与组件、模块化与组件化的理解"><a href="#模块与组件、模块化与组件化的理解" class="headerlink" title="模块与组件、模块化与组件化的理解"></a>模块与组件、模块化与组件化的理解</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>向外提供特定的js程序，一般就是一个js文件</li><li>为什么要拆成模块？<br>随着业务逻辑增加，代码越来越多越来越复杂</li><li>作用：复用js，提高js运行效率<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3></li><li>用来实现局部功能效果的代码和资源集合(html/css/image/js)</li><li>为什么要拆成组件？<br>一个界面功能更复杂</li><li>作用：复用代码，简化项目编码，提高运行效率<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3>当应用的js都以模块来编写的，这个应用就是一个模块化应用<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</li></ul><h2 id="react面向组件编程"><a href="#react面向组件编程" class="headerlink" title="react面向组件编程"></a>react面向组件编程</h2><h3 id="两种定义组件方式"><a href="#两种定义组件方式" class="headerlink" title="两种定义组件方式"></a>两种定义组件方式</h3><ol><li>函数式组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 1. 创建组函数式件</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// 结果为undefined 因为函数要经过babel翻译，翻译后开启严格模式，禁止自定义函数里的this指向window</span></span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript"><span class="hljs-comment">// ReactDOM.render(demo,document.getElementById(&#x27;test&#x27;)) 这样写会报错，不能直接写demo</span></span><br><span class="language-javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) 这样写会报错，不能直接写demo</span><br><span class="language-javascript"><span class="hljs-comment">// D 大写因为是组件，闭合标签，以标签形式写出</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">执行了ReactDOM.render(&lt;Demo/&gt;）......之后发生了什么？</span></span><br><span class="hljs-comment"><span class="language-javascript">    1. react 解析组件标签，找到Demo组件</span></span><br><span class="hljs-comment"><span class="language-javascript">    2. 发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实的DOM，随后呈现在页面中</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>类式组件<h4 id="回顾一下es6"><a href="#回顾一下es6" class="headerlink" title="回顾一下es6"></a>回顾一下es6</h4></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 接收new 传递过来的参数，用构造器方法</span><br>    <span class="hljs-title function_">constructotr</span>(<span class="hljs-params">name,age</span>) &#123;<br>        <span class="hljs-comment">// 构造器中的this指什么？类的实例对象</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    &#125;<br>    <span class="hljs-comment">// 除了构造器方法，还有一般方法</span><br>    <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>        speak方法放在哪里了？ 类的原型对象上<br>        speak方法给谁用的？给实例用<br>        speak中<span class="hljs-variable language_">this</span>是谁？p1/p2 通过<span class="hljs-title class_">Person</span>实例调用speak时，speak中的<span class="hljs-variable language_">this</span>就是<span class="hljs-title class_">Person</span>实例<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我年龄是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>`</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 用类创建一个Person实例对象</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">19</span>)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;jerry&#x27;</span>,<span class="hljs-number">17</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2)<br>p1.<span class="hljs-title function_">spaek</span>()<br>p2.<span class="hljs-title function_">speak</span>()<br><br><span class="hljs-comment">// 创建一个Student类，继承于Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age,grade</span>) &#123; <span class="hljs-comment">// 自己写构造器，有想添加的东西在这儿写</span><br>        <span class="hljs-comment">// 必须使用super,且在最前面</span><br>        <span class="hljs-variable language_">super</span>(name,age)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade<br>    &#125;<br>    <span class="hljs-comment">// 重写从父类继承过来的方法</span><br>    <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我年龄是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>,我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.grade&#125;</span>年级`</span>)<br>    &#125;<br>    <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// study方法放在哪儿？ 类的原型上，供实例使用</span><br>        <span class="hljs-comment">// 通过Student实例调用study时候,study中的this就是Student的实例</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我很努力的学习&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;小张&#x27;</span>,<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;高一&#x27;</span>) <span class="hljs-comment">// 若想再添加一个年级，但是继承的Person中没有</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1)<br><span class="hljs-comment">// 静态方法就是构造函数本身属性，不在类的原型对象上，所以实例无法调用</span><br></code></pre></td></tr></table></figure><p>【AIA】</p><ol><li>类中的构造器不是必须写，要对实例进行一些初始化操作，如指定添加属性时才写（比如grade）</li><li>如果A类继承B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的</li><li>类中所定义的方法，都是放在类的原型对象上，供实例使用</li></ol><h3 id="创建类式组件"><a href="#创建类式组件" class="headerlink" title="创建类式组件"></a>创建类式组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// render是放在哪里的？ 类（MyComponent）的原型对象上，供实例使用</span></span><br><span class="language-javascript">            <span class="hljs-comment">// render中的this是谁？MyComponent的组件实例对象</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyComponent</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span><br><span class="hljs-comment"><span class="language-javascript">        1. react 解析组件标签，找到MyComponent组件</span></span><br><span class="hljs-comment"><span class="language-javascript">        2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span><br><span class="hljs-comment"><span class="language-javascript">        3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组件三大属性"><a href="#组件三大属性" class="headerlink" title="组件三大属性"></a>组件三大属性</h2><h3 id="第一————组件的状态"><a href="#第一————组件的状态" class="headerlink" title="第一————组件的状态"></a>第一————组件的状态</h3><ul><li><p>像es6一样，我需要用到实例中的state，但默认是空值,就是空对象。需要自己添加，所以用到constructor和super</p></li><li><p>state定义：state上包含了可能变化的数据。state由用户自定义。它是一个普通javascript对象</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(props)</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>&#125; <span class="hljs-comment">// 初始化状态</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 读取状态</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">            <span class="hljs-comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">    执行了ReactDOM.render(&lt;MyComponent/&gt;）......之后发生了什么？</span></span><br><span class="hljs-comment"><span class="language-javascript">        1. react 解析组件标签，找到MyComponent组件</span></span><br><span class="hljs-comment"><span class="language-javascript">        2. 发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法</span></span><br><span class="hljs-comment"><span class="language-javascript">        3. 将render返回的虚拟DOM转为真实DOM，随后呈现在页面中</span></span><br><span class="hljs-comment"><span class="language-javascript">    */</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>事件绑定<h4 id="回顾一下原生事件绑定"><a href="#回顾一下原生事件绑定" class="headerlink" title="回顾一下原生事件绑定"></a>回顾一下原生事件绑定</h4></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>btn1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>btn2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;demo()&quot;</span>&gt;</span>btn3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法一</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> btn1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn1&#x27;</span>)</span><br><span class="language-javascript">    btn1.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮1被点击了&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法二</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> btn2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn2&#x27;</span>)</span><br><span class="language-javascript">    btn2.<span class="hljs-property">onclick</span> = (<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮1被点击了&#x27;</span>) </span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 方法三</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮3被点击了&#x27;</span>) </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>react事件绑定</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> that</span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(props)</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>&#125; <span class="hljs-comment">// 初始化状态</span></span><br><span class="language-javascript">            that = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 声明一个that，让下面的也可以用这个this</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 解决this指向undefined问题</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 读取状态</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">            <span class="hljs-comment">// return &lt;h1&gt;今天天气&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;  有const声明就不需要写的那么麻烦了</span></span><br><span class="language-javascript">            <span class="hljs-comment">// return &lt;h1 id=&quot;title&quot;&gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt;</span></span><br><span class="language-javascript">            <span class="hljs-comment">// return &lt;h1 onClick=&#123;demo()&#125; &gt;今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！&lt;/h1&gt; //直接在里面写onclick,demo不能用字符串形式，demo用函数的形式写出</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span> &gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-comment">// 但是加了括号表示立即执行，所以要去掉</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>) &#123; </span><br><span class="language-javascript">            <span class="hljs-comment">// changeWeather放在哪儿？放在weather的原型对象上，供实例使用</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 通过weather实例调用changeWeather时，changeWeather中的this就是Weather的实例</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 所以不需要that</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span>) </span><br><span class="language-javascript">            <span class="hljs-comment">// 发现this，undefined，为什么this会丢失? 举一个原生例子 看下一个js</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 所以这里相当于直接调用，changeWeather是作为onClick的回调，不是通过实例调用又因为类中方法默认开启局部的严格模式</span></span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">render</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> title = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;title&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* 第一种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span><br><span class="language-javascript">    title.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;标题被点击&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">/*第二种 不建议要先document.getElementById(&#x27;title&#x27;)*/</span></span><br><span class="language-javascript">    title.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;标题被点击&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">/*第三种 */</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 又需要将这个定义在类中</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 此处修改isHot的值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isHot) <span class="hljs-comment">// 这样会报错，因为state undefined，demo函数不在weather类中，根本没有关系的两个东西</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 所以</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>  = age<br>    &#125;<br>    <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// study方法放在原型对象上，供实例对象使用</span><br>        <span class="hljs-comment">// 通过Person实例调用study时，study中的this就是Person实例</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-number">19</span>)<br>p1.<span class="hljs-title function_">study</span>() <span class="hljs-comment">// 通过实例调用study对象</span><br><span class="hljs-keyword">const</span> x = p1.<span class="hljs-property">study</span><br><span class="hljs-title function_">x</span>() <span class="hljs-comment">/* 这个时候study中的this打印为undefined，因为这个属于直接调用，上面p1.study() 是实例调用；</span><br><span class="hljs-comment">    类中的定义的方法，全部局部自动开启严格模式</span><br><span class="hljs-comment">    比如:</span><br><span class="hljs-comment">    function demo() &#123;</span><br><span class="hljs-comment">        console.log(this) // window</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    demo()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    function demo() &#123;</span><br><span class="hljs-comment">        &#x27;use strict&#x27;</span><br><span class="hljs-comment">        console.log(this) // undefined</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    demo</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol start="3"><li>setState 应用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 构造器调用几次————1 次</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constructor)</span><br><span class="language-javascript">        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">super</span>(props)</span><br><span class="language-javascript">            <span class="hljs-comment">// 初始化状态</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=&#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125; </span><br><span class="language-javascript">            <span class="hljs-comment">// 解决this指向undefined问题</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">changeWeather</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// bind返回一个新函数，手动执行；新函数里的this变为Weather的实例对象，然后把函数放在实例自身，给函数起了个名字叫changeWeather，因此实例对象自身Weather，就多了一个方法叫changeWeather</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// render 调用几次———— 1+n次 1是初始化那次，n是状态更新的次数</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(render)</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 读取状态</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span> &gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！,&#123;wind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-comment">// 但是加了括号表示立即执行，所以要去掉</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// changeWeather 调用几次———— 点几次调用几次</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(render)</span><br><span class="language-javascript">        <span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>) &#123;   </span><br><span class="language-javascript">            <span class="hljs-comment">// 获取原来的isHot值</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> isHot = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 严重注意状态必须通过setState进行更新,且合并（更改isHot,后面的wind不会变）</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)</span><br><span class="language-javascript">            <span class="hljs-comment">// 严重注意，状态不可直接更改，要借助内置API直接更改</span></span><br><span class="language-javascript">            <span class="hljs-comment">// this.state.isHot = !isHot</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span>) <span class="hljs-comment">// 这样两行改了，控制台点击true，false进行切换，但是react不认可，是单向数据流</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>setState函数<ul><li>无返回值</li><li>参数1:<ul><li>是一个Object,修改后state的值是setState传入Object和原state的值浅合并的值</li><li>或一个updater函数<code>(state,props) =&gt; nextState</code>,updater函数有助于多次对同一个state的值累加修改</li></ul></li><li>参数2:回调函数，在setState生效后调用（时机同componentDidUpdate）</li><li>setState生效是异步的</li></ul></li></ul><ol start="4"><li> 上述代码精简方式<br>类中可以直接写赋值语句不需要let什么的声明，直接a=1<br>所以</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 可以不写构造器</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 想给Weather实例对象身上都添加一个state属性，那就拿出来直接赋值</span></span><br><span class="language-javascript">        state=&#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">wind</span>:<span class="hljs-string">&#x27;微风&#x27;</span>&#125;   <span class="hljs-comment">// 初始化状态</span></span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 读取状态</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span> &gt;</span>今天天气&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;！,&#123;wind&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <span class="hljs-comment">// 但是加了括号表示立即执行，所以要去掉</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 所以这个的onClick=&#123;this.changeWeather&#125;调用的是自身的changeWeather，不会去找原型上的changeWeather</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 自定义方法（赋值语句+箭头函数）</span></span><br><span class="language-javascript">        changeWeather = <span class="hljs-function">() =&gt;</span> &#123;   </span><br><span class="language-javascript">            <span class="hljs-comment">// 箭头函数没有自己的this，找外层函数的this </span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> isHot = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">isHot</span>           </span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Weather的实例对象</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Weather</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>【AIA】</p><ul><li>state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）</li><li>组件被称为“状态机”，像生活中的红绿灯，通过更新组件的state来更新对应的页面显示（重新渲染组件）<br>[注意]</li></ul><ol><li>组件中render方法中的this为组件的实例对象</li><li>组件自定义方法中的this都是undefined，如何解决？<br> a. 强制绑定this:通过函数对象的bind()<br> b. 箭头函数</li><li>状态数据不能直接修改或更新，必须通过setState方法修改，不能直接赋值，setState后会引发render</li><li>this.state是一个Object类型/null，不能是简单类型</li><li>state在构造方法内部初始化或在类的成员变量声明处初始化</li></ol><h3 id="组件的第二个属性————props"><a href="#组件的第二个属性————props" class="headerlink" title="组件的第二个属性————props"></a>组件的第二个属性————props</h3><ul><li>函数组件的第一个参数是props（它接收的属性，是一个object）</li><li>类组件的props用this.props接收</li><li>父传子：用属性传递数据</li><li>子传父：用回调函数传递数据</li><li>children属性指react元素之间的子元素，可以是一个元素，字符串或者数组<br>类里面的this指向组件的实例对象，里面有一个props空对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   </span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="hljs-comment">// &lt;ul&gt;</span></span><br><span class="language-javascript">                <span class="hljs-comment">//     &lt;li&gt;姓名:&#123;this.props.name&#125;&lt;/li&gt;</span></span><br><span class="language-javascript">                <span class="hljs-comment">//     &lt;li&gt;性别:&#123;this.props.sex&#125;&lt;/li&gt;</span></span><br><span class="language-javascript">                <span class="hljs-comment">//     &lt;li&gt;年龄:&#123;this.props.age&#125;&lt;/li&gt;</span></span><br><span class="language-javascript">                <span class="hljs-comment">// &lt;/ul&gt;</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 上面声明后可不需要写this.props</span></span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&quot;18&quot;</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) <span class="hljs-comment">// 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 但是上述写法太麻烦了，所以</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> p = &#123;name=<span class="hljs-string">&quot;tom&quot;</span> sex=<span class="hljs-string">&quot;男&quot;</span> age=<span class="hljs-string">&quot;18&quot;</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#123;p.name&#125;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&#123;p.sex&#125;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;p.age&#125;</span> /&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">    <span class="hljs-comment">// 这样还是太麻烦</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...p</span>&#125;/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...p) <span class="hljs-comment">// 报错，仅仅适用于标签属性的传递，别的地方都不行</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="回顾一下扩展运算符"><a href="#回顾一下扩展运算符" class="headerlink" title="回顾一下扩展运算符"></a>回顾一下扩展运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr1) <span class="hljs-comment">// 1,2,3,4,5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">// [1,2,3,4,5]</span><br><span class="hljs-comment">// 连接数组</span><br><span class="hljs-keyword">let</span> arr3 = [...arr1,...arr2]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr3) <span class="hljs-comment">// [1,2,3,4,5,2,4,6,8,10]</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a+b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a+b<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-comment">// 若有很多数字或者数字不固定</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...numbers</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numbers) <span class="hljs-comment">// [1,2] 是个数组，...可以批量都接收到</span><br>    <span class="hljs-keyword">return</span> numbers.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preValue,currentValue</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 函数体</span><br>        <span class="hljs-keyword">return</span> preValue + currentValue <span class="hljs-comment">// 结果为3，1+2</span><br>    &#125;)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)) <br><br> <span class="hljs-comment">// 原生中与react不同，react中babel和引入的react，可以直接用根本没有触发什么赋值对象</span><br> <span class="hljs-comment">// 构造字面量对象时使用展开语法</span><br><span class="hljs-keyword">let</span> person = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...person) <span class="hljs-comment">// Found non-callable @@iterator at 展开运算符 意思是 对象类型没有接口 就是说展开运算符不能展开一个对象</span><br><span class="hljs-comment">// 但如果</span><br><span class="hljs-keyword">let</span> person = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span>&#125;<br><span class="hljs-keyword">let</span> person2 = &#123;...person&#125; <span class="hljs-comment">// 表示赋值一个对象</span><br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jerry&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2) <span class="hljs-comment">// &#123;name:&#x27;tom&#x27;,age:&#x27;18&#x27;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person) <span class="hljs-comment">// &#123;name:&#x27;jerry&#x27;,age:&#x27;18&#x27;&#125;</span><br><br> <span class="hljs-comment">// 合并</span><br><span class="hljs-keyword">let</span> person3 = &#123;...person,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;地球&#x27;</span>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person3) <span class="hljs-comment">// &#123;name:&#x27;jack&#x27;,age:&#x27;18&#x27;,address:&#x27;地球&#x27;&#125;        </span><br></code></pre></td></tr></table></figure><h4 id="props有一些限制"><a href="#props有一些限制" class="headerlink" title="props有一些限制"></a>props有一些限制</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   </span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">            <span class="hljs-comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 对标签属性进行类型、必要性的限制</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Person</span>.<span class="hljs-property">propsTypes</span> = &#123; <span class="hljs-comment">// props属性</span></span><br><span class="language-javascript">        <span class="hljs-comment">// name:&#x27;必传，字符串&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// name:React.propTypes.string // React.propTypes 这是react内置对象，react15用，但react16被弃用了</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 所以引入依赖包prop-types .js ,引入后多了一个对象PropType</span></span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">// 加了isRequired表示名字必须传</span></span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>, <span class="hljs-comment">// 限制性别为字符串</span></span><br><span class="language-javascript">        <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>, <span class="hljs-comment">// 限制年龄为数值</span></span><br><span class="language-javascript">        <span class="hljs-attr">speak</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span> <span class="hljs-comment">// 不能写function，会报错必须是一个function但得到了undefined，所以写func,function是个关键字</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 指定默认标签属性</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// sex默认值为男</span></span><br><span class="language-javascript">        <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">// 年龄默认值为18</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span><br><span class="language-javascript">    <span class="hljs-comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 变为</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">speak</span>=<span class="hljs-string">&#123;speak&#125;/</span>&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我在讲话&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>姓名必须指定，且为字符串类型</li><li>性别为字符串类型，如果性别没有指定，默认为男</li><li>年龄为字符串类型，且为数字类型，默认值为18</li></ul><h4 id="props的简写方式"><a href="#props的简写方式" class="headerlink" title="props的简写方式"></a>props的简写方式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      </span><br><span class="language-javascript">       <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> propsTypes = &#123;          </span><br><span class="language-javascript">               <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, </span><br><span class="language-javascript">               <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">speak</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span> </span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-comment">// 指定默认标签属性</span></span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> defaultProps = &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// sex默认值为男</span></span><br><span class="language-javascript">               <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">// 年龄默认值为18</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">               <span class="hljs-comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">               )</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 对标签属性进行类型、必要性的限制</span></span><br><span class="language-javascript">       </span><br><span class="language-javascript">       <span class="hljs-comment">// 2. 渲染组件到页面</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 需求希望年龄+1, 又不改真实年龄结果变成年龄：191，需要改变基本数据类型，把字符串变成number</span></span><br><span class="language-javascript">       <span class="hljs-comment">//  ReactDOM.render(&lt;Person name=&quot;tom&quot; sex=&quot;男&quot; age=&quot;18&quot; /&gt;,document.getELementById(&#x27;test&#x27;)) // 直接以key=&quot;valuw&quot;形式放上去，可以接收多个</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 变为</span></span><br><span class="language-javascript">       <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;</span> <span class="hljs-attr">speak</span>=<span class="hljs-string">&#123;speak&#125;/</span>&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">function</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我在讲话&#x27;</span>)</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">       <span class="hljs-variable language_">super</span>(props) <span class="hljs-comment">// 这个不用super接props也可以获取到，加了super与不加的区别在于this.props</span></span><br><span class="language-javascript">       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>) <span class="hljs-comment">// 打印实例自身的props，可以拿到；若没有super，undefined</span></span><br><span class="language-javascript">       <span class="hljs-comment">// 总结：若不省略构造器，构造器是否接受props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">       <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> propsTypes = &#123;          </span><br><span class="language-javascript">               <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, </span><br><span class="language-javascript">               <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span>,</span><br><span class="language-javascript">               <span class="hljs-attr">speak</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">func</span> </span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-comment">// 指定默认标签属性</span></span><br><span class="language-javascript">           <span class="hljs-keyword">static</span> defaultProps = &#123;</span><br><span class="language-javascript">               <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// sex默认值为男</span></span><br><span class="language-javascript">               <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">// 年龄默认值为18</span></span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span></span><br><span class="language-javascript">               <span class="hljs-comment">// this.props.name = &#x27;jack&#x27; 此行代码会报错，因为props是只读的</span></span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄:&#123;age + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                   <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">               )</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="函数组件使用props"><a href="#函数组件使用props" class="headerlink" title="函数组件使用props"></a>函数组件使用props</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> &#123;name,age,sex&#125; = props</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>姓名:&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>性别:&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年龄:&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-javascript">        )</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 限制写在外面，它不像类式组件有static属性</span></span><br><span class="language-javascript">     <span class="hljs-comment">// 对标签属性进行类型、必要性的限制</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Person</span>.<span class="hljs-property">propsTypes</span> = &#123; <span class="hljs-comment">// props属性</span></span><br><span class="language-javascript">            <span class="hljs-attr">name</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>.<span class="hljs-property">isRequired</span>, <span class="hljs-comment">// 加了isRequired表示名字必须传</span></span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">string</span>, <span class="hljs-comment">// 限制性别为字符串</span></span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-title class_">PropTypes</span>.<span class="hljs-property">number</span> <span class="hljs-comment">// 限制年龄为数值</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 指定默认标签属性</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Person</span>.<span class="hljs-property">defaultProps</span> = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-comment">// sex默认值为男</span></span><br><span class="language-javascript">            <span class="hljs-attr">age</span>:<span class="hljs-number">18</span> <span class="hljs-comment">// 年龄默认值为18</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 渲染到组件页面</span></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jerry&quot;</span> <span class="hljs-attr">sex</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#123;18&#125;/</span>&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>和props的区别：state是内部的状态，由自身维护（没必要让父元素管理属性），可以修改；props是组件外部传入进来的，组件不可以修改props上的值</li><li>react 不会自动引入prop-types要yarn add prop-types<br>import PropTypes from ‘props-types’</li></ul><h3 id="组件的第三个属性————ref"><a href="#组件的第三个属性————ref" class="headerlink" title="组件的第三个属性————ref"></a>组件的第三个属性————ref</h3><ul><li>ref字符串形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">       <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">           <span class="hljs-comment">// 展示左侧输入框数据——字符串方法</span></span><br><span class="language-javascript">           showData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 不需要写的这么麻烦</span></span><br><span class="language-javascript">               <span class="hljs-comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span><br><span class="language-javascript">               <span class="hljs-comment">// alert(input.value)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">input1</span>) <span class="hljs-comment">// 这个是真实DOM了，所以可以</span></span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span></span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>) </span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           showData2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span></span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-comment">// ref回调方法</span></span><br><span class="language-javascript">           <span class="hljs-comment">// 展示左侧输入框数据</span></span><br><span class="language-javascript">           showData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 不需要写的这么麻烦</span></span><br><span class="language-javascript">               <span class="hljs-comment">// const input = document.getElementById(&#x27;input1&#x27;)</span></span><br><span class="language-javascript">               <span class="hljs-comment">// alert(input.value)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>.<span class="hljs-property">input1</span>) <span class="hljs-comment">// 这个是真实DOM了，所以可以</span></span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>) </span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           showData2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">const</span> &#123;input2&#125; = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>(input2.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">           <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                   <span class="hljs-comment">// 字符串类型的ref不太推荐，存在效率问题，写多了效率不高</span></span><br><span class="language-javascript">                       <span class="hljs-comment">// &lt;div&gt;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">//     &#123;/* &lt;input type=&quot;text&quot; id=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt; 可以不用写id，换成ref */&#125;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">//     &lt;input type=&quot;text&quot; ref=&quot;input1&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">//     &lt;button onClick=&#123;this.showData&#125;&gt;点我提示左侧数据&lt;/button&gt;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">//     &lt;input type=&quot;text&quot; onBlur=&#123;this.showData2&#125; ref=&quot;input2&quot; placeholder=&quot;诗句焦点提示数据&quot;/&gt;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">//     &#123;/* 只要写ref,就会放到Demo实例对象refs中 */&#125;</span></span><br><span class="language-javascript">                       <span class="hljs-comment">// &lt;/div&gt;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(a)</span>=&gt;</span> &#123;console.log(a)&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                       &#123;/* 这个a,打印出来后是 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                           ref属性当前所在的节点 */&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                       </span></span><br><span class="language-xml"><span class="language-javascript">                       &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;(a)</span>=&gt;</span> &#123;this.input1 = a&#125; &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt; */&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                       &#123;/* 把a这个节点放在组件实例自身上 */&#125;</span></span><br><span class="language-xml"><span class="language-javascript"></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;currentNode</span> =&gt;</span> this.input1 = currentNode &#125;placeholder=&quot;点击按钮提示数据&quot;/&gt;</span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.input2 = c&#125; placeholder=&quot;失去焦点提示数据&quot;/&gt;</span></span><br><span class="language-xml"><span class="language-javascript">                   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">                   </span><br><span class="language-javascript">               )</span><br><span class="language-javascript">               </span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>回调ref中执行次数问题，回调函数形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">            showInfo = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> &#123;input1&#125; = <span class="hljs-variable language_">this</span></span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(input1.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            changeWeather = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取原来的状态</span></span><br><span class="language-javascript">                state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>&#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 更新状态</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">isHot</span>:!isHot&#125;)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            saveInput = <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">input1</span> = c</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;@&#x27;</span>,c)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        &#123;/* <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;c</span> =&gt;</span> this.input1 = c;console.log(&#x27;@&#x27;,c)&#125;/&gt; */&#125; </span></span><br><span class="language-xml"><span class="language-javascript">                        &#123;/* 解决第一次传入参数null，第二次会传入参数DOM元素 通过ref回调函数定义成class的绑定函数方式*/&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.saveInput&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showInfo&#125;</span>&gt;</span>点我提示输入的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeWeather&#125;</span>&gt;</span>点我切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>            </span><br><span class="language-javascript">                )               </span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125; </span><br><span class="language-javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">            如果ref回调函数是以内联函数的方式定义的，在更新的过程中会被执行两次，第一次传入参数null，第二次会传入参数DOM元素</span></span><br><span class="hljs-comment"><span class="language-javascript">            这是因为在每次渲染时会创建一个新的函数实例，所以react清空旧的ref并且设置新的</span></span><br><span class="hljs-comment"><span class="language-javascript">            通过ref回调函数定义成class的绑定函数的方式可以避免上述问题</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">        <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>createRef形式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 创建类式组件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">                React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，但是该容器是专人专用</span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">            myRef = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()</span><br><span class="language-javascript">            myRef2 = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createRef</span>()</span><br><span class="language-javascript">            <span class="hljs-comment">// 展示左侧输入框数据</span></span><br><span class="language-javascript">            showData = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>) <span class="hljs-comment">// &#123;currrent:input&#125;</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>.<span class="hljs-property">current</span>) <span class="hljs-comment">// 拿的是这个input节点 &lt;input type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt; </span></span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">// input框输入什么，这里显示什么</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 展示右侧输入框数据</span></span><br><span class="language-javascript">            showData2 = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">// input框输入什么，这里显示什么</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                        &#123;/* input被存在this.myRef中 */&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.myRef2&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.showData2&#125;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击按钮提示数据&quot;</span>/&gt;</span> </span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>            </span><br><span class="language-javascript">                )               </span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125; </span><br><span class="language-javascript">        <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="react中的事件处理"><a href="#react中的事件处理" class="headerlink" title="react中的事件处理"></a>react中的事件处理</h2><ol><li>通过onXXX属性指定事件处理函数（注意大小写）</li></ol><ul><li>react使用的是自定义（合成）事件，而不是使用的原生DOM事件————为了更好的兼容</li><li>react中事件是通过事件委托方式处理的（委托给组件最外层元素）————为了高效</li></ul><ol start="2"><li>通过event.target得到发生事件的DOM元素（不要过度使用Refs,可以用这个代替）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">showData = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">myRef2</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>) <br>&#125;<br>showData = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>) <br>&#125;<br><span class="hljs-comment">// 但像myref,在上述代码input中无法省略，因为这个</span><br></code></pre></td></tr></table></figure><h3 id="受控组件，非受控组件"><a href="#受控组件，非受控组件" class="headerlink" title="受控组件，非受控组件"></a>受控组件，非受控组件</h3><ul><li>非受控组件<br>通过手动操作dom方式获取文本框的值，文本框状态不受react组件的state中状态控制，直接通过原生dom获取输入框的值<h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4></li></ul><ol><li>导入createRef函数</li><li>调用createRef函数，创建一个ref对象，存储到名为msgRef的实例属性中</li><li>为input添加ref属性，只为msgRef</li><li>在按钮的事件处理程序中，通过msgRef.current即可拿到input对应的dom元素，而其中msg.current.value拿到的就是文本框的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>,&#123;createRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br> <span class="hljs-comment">// 这个实例属性可以自定义</span><br> msgRef = <span class="hljs-title function_">createyRef</span>()<br> getValue=<span class="hljs-function">() =&gt;</span> &#123;<br>     <span class="hljs-comment">// 通过msgRef获取input value值</span><br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">msgRef</span>.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>)<br> &#125;<br> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">return</span> (<br>         <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.msgRef&#125;/</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getValue&#125;</span>&gt;</span>点击获取输入框的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/&gt;</span></span><br>     )<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这并不是react特有的行为，这其实与javascript函数工作原理有关。通常情况下，如果你没有在方法后面添加(),例如onClick={this.handleClick},你应为这个方法绑定this</p><ul><li>受控组件<br>input框自己的状态被react组件控制<br>受控组件就是说可以被react动态控制的组件<h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4></li></ul><ol><li>在组件的state中声明一个组件的状态数据</li><li>将状态数据设置为input标签元素的value属性的值</li><li>为input添加onchange事件</li><li>在事件处理程序中，通过事件对象e获取到当前文本框的值（即用户当前输入的值）</li><li>调用setState方法，将文本框的值作为state状态的最新值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span><br>    state = &#123;<br>        <span class="hljs-attr">message</span>:<span class="hljs-string">&#x27;this is a message&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// 回调函数</span><br>    inputChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;change事件触发了&#x27;</span>,e)<br>        <span class="hljs-comment">// 4. 需要在这里拿到输入框最新的值 交给state中的message</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">message</span>:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="hljs-comment">// 2. 给input框的value属性绑定 react state</span><br>            <span class="hljs-comment">// 3. 给input框绑定一个change事件 为了拿到当前输入框中的数据 （onchange指定事件回调）</span><br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.message&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.inputChange&#125;/</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="优化上述代码"><a href="#优化上述代码" class="headerlink" title="优化上述代码"></a>优化上述代码</h4><p>若有很多个input，比如用户名，密码等等，总不能绑定一个又一个onchange事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    <span class="hljs-comment">// 1. 声明一个用来控制input value属性的react组件自己的状态</span><br>    state = &#123;<br>        <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br>    <span class="hljs-comment">// 回调函数</span><br>    saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataType)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123; <span class="hljs-comment">// 把saveFormData返回值返回的函数交给onchange作为回调</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>                <span class="hljs-comment">// dataType:e.target.value // 这样写是往state中放了一个新的Key,在用户名输入的内容，会出现在dataType这个key后面；压根就没有读取</span><br><br>                <span class="hljs-comment">// 需要读取变量,变量用[]</span><br>                [dataType]:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>            &#125;)<br>        &#125;     <br>    &#125;<br><br>    <span class="hljs-comment">// 表单提交的回调</span><br>    handleSubmit = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        e.<span class="hljs-title function_">preventDefault</span>() <span class="hljs-comment">// 阻止表单默认提交</span><br>        <span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> <br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">`用户名是<span class="hljs-subst">$&#123;username&#125;</span>`</span>,密码是$&#123;password&#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>           <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">            用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">username</span>&#x27;)&#125;/&gt;</span> </span><br><span class="language-xml">            &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span><br><span class="language-xml">            密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.saveFormData(</span>&#x27;<span class="hljs-attr">password</span>&#x27;)&#125;/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高阶函数和函数柯里化"><a href="#高阶函数和函数柯里化" class="headerlink" title="高阶函数和函数柯里化"></a>高阶函数和函数柯里化</h4><ol><li>上述saveFormData这就是高阶函数<br> 高阶函数：<pre><code class="hljs"> 如果一个函数符合下面两个规范中的任何一个，那该函数就是高阶函数     1. 若A函数接收的参数是一个函数，那么A就可以称之为高阶函数     2. 若A函数调用的返回值依然是一个函数，那么A就可以称之为高阶函数</code></pre> 常见的高阶函数：<pre><code class="hljs"> promise、setTimeout、arr.map()等等</code></pre></li><li>函数柯里化<br> 通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b,c</span>) &#123;<br>    <span class="hljs-keyword">return</span> a+b+c<br>&#125;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum )<br></code></pre></td></tr></table></figure><h4 id="不用柯里化实现"><a href="#不用柯里化实现" class="headerlink" title="不用柯里化实现"></a>不用柯里化实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  saveFormData = (dataType,value) =&gt; &#123;     </span><br><span class="hljs-comment">//     this.setState(&#123;[dataType]:value&#125;) </span><br><span class="hljs-comment">//  &#125;</span><br><span class="hljs-comment">// 精简代码</span><br> saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType,e</span>) =&gt;</span> &#123;     <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;[dataType]:e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>&#125;) <br>&#125;<br><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>    <span class="hljs-comment">//    &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br>    <span class="hljs-comment">//         用户名&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;username&#x27;,e.target.value)&#125;&#125;/&gt; </span><br>    <span class="hljs-comment">//         &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span><br>    <span class="hljs-comment">//         密码&lt;input type=&quot;text&quot;  onChange=&#123;(e) =&gt; &#123;this.saveFormData(&#x27;password&#x27;,e.target.value)&#125;&#125;/&gt;</span><br>    <span class="hljs-comment">//     &lt;/form&gt;</span><br><br>     <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class="language-xml">        用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;username&#x27;,e)&#125;&#125;/&gt; </span><br><span class="language-xml">        &#123;/* 但若是这么写就是把saveFormData返回值作为回调，立即执行  saveFormData返回值是undefined */&#125;</span><br><span class="language-xml">        密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;this.saveFormData(&#x27;password&#x27;,e)&#125;&#125;/&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数组件与类组件区别"><a href="#函数组件与类组件区别" class="headerlink" title="函数组件与类组件区别"></a>函数组件与类组件区别</h2><ul><li>类组件有状态，函数组件没有</li><li>类组件有生命周期，函数组件没有</li><li>构造方法<code>constructor(props)</code></li><li>如果类组件有构造方法，必须在构造方法中写<code>super(props)</code></li><li>this.props访问属性，this.state访问状态 </li></ul><h2 id="react生命周期"><a href="#react生命周期" class="headerlink" title="react生命周期"></a>react生命周期</h2><p>生命周期回调函数 又叫 生命周期钩子函数 生命周期钩子 生命周期函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript">     </span><br><span class="language-javascript">    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Life</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 要求2秒完全可见到消失</span></span><br><span class="language-javascript">        state = &#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">1</span>&#125;</span><br><span class="language-javascript">        death = <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 卸载组件前要先清除定时器，拿到定时器的id</span></span><br><span class="language-javascript">                <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 卸载组件回调</span></span><br><span class="language-javascript">            <span class="hljs-comment">// ReactDOM.unmountComponent() // 若有很多个容器不能用这个</span></span><br><span class="language-javascript">            <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">unmountComponentAtNode</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>))</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        timer = <span class="hljs-literal">null</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 组件挂载完毕 后调用</span></span><br><span class="language-javascript">        <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 这个不需要像death一样，写一个箭头函数，因为它与render是兄弟，后期是通过Life的实例对象 .调用的</span></span><br><span class="language-javascript">             <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> &#123;opacity&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 减小0.1</span></span><br><span class="language-javascript">                opacity -= <span class="hljs-number">0.1</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span>(opacity &lt;=<span class="hljs-number">0</span>) opacity = <span class="hljs-number">1</span> <span class="hljs-comment">// 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 设置新的透明度</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">setState</span> (&#123;opacity&#125;)</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">200</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 组件将要卸载</span></span><br><span class="language-javascript">        <span class="hljs-comment">// componentWillUnmount() &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     这样清楚定时器也可以</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     clearInterval(this.timer)</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// render调用的时机：初始化渲染，状态更新之后</span></span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 这样写代码直接卡死了，cpu一路飙升；因为设置更新状态，一更新状态就调render， 引发无限递归，多次调用render</span></span><br><span class="language-javascript">            <span class="hljs-comment">// setInterval(() =&gt; &#123;</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     // 1. 获取原状态,这里不能用const，const声明变量不可修改</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     let &#123;opacity&#125; = this.state</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     // 减小0.1</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     opacity -= 0.1</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     if(opacity &lt;=0) opacity = 1 // 为什么是&lt;=0因为在js中0.1+0.2不一定等于0.3</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     // 设置新的透明度</span></span><br><span class="language-javascript">            <span class="hljs-comment">//     this.setState (&#123;opacity&#125;)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// &#125;,200)</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    &#123;/* h2中写style=&#123;&#123;opacity:this.state.opacity&#125;&#125; */&#125;</span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>只要学不死，就往死里学<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.death&#125;</span>&gt;</span>不活了<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">            )</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Life</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>组件是否应该被更新shouldComponentUpdate<br>true可以更新<br>false不可以更新<br>不写这个钩子，默认true</li><li>forceUpdate强制更新<br>可以绕过shouldComponentUpdate，直接进行更新<h3 id="父组件render"><a href="#父组件render" class="headerlink" title="父组件render"></a>父组件render</h3>componentWillReceiveProps这个第一次传的不算，以后传的才算</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    state = &#123;<span class="hljs-attr">carName</span>:<span class="hljs-string">&#x27;宝马&#x27;</span>&#125;<br>    changeCar = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">carName</span>:<span class="hljs-string">&#x27;奔驰&#x27;</span>&#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是A组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.changeCar&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">B</span> <span class="hljs-attr">carName</span>=<span class="hljs-string">&#123;this.state.carName&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>    <span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;B---componentWillReceiveProps&#x27;</span>,props)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是B组件，接收的车是:&#123;this.props.carName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>[AIA]<br>旧版本</p><ol><li>初始化阶段: 由ReactDoM.render()触发—初次渲染<br> constructor()<br> componentWillMount()<br> render()</li><li>componentDidMount()更新阶段: 由组件内部this.setSate()或父组件重新render触发          、/<br> shouldComponentUpdate()componentwillUpdate()<br> render()<br> componentDidUpdate()</li><li>卸载组件:由ReactDOM.unmountComponentAtNode()触发componentwillUnmount()<br>新生命周期<br>去掉三个钩子，加了两个钩子<br>componentWillMount() componentwillUpdate() componentwillUnmount()</li></ol><ul><li>getDerivedStateFromProps:若state的值任何时候都取决于props，可以使用</li><li>getSnapShotBeforeUpdate(preProps,preState,snapValue) 在更新前获取快照<br>在页面调完时拿到数据在处理时使用，此生命周期的任何返回值将作为参数传递给componentDidUpdate</li></ul><p>[AIA]</p><ol><li>初始化阶段: 由ReactDom.render()触发—初次渲染<br> constructor() 创建组件时最先执行，初始化的时候只执行一次<br> getDerivedStateFromProps<br> render() 每次组件渲染都会触发，渲染UI,不能在里面调用setState<br> componentDidMount()=====&gt; 常用  组件挂载完成后执行，初始化的时候执行一次<pre><code class="hljs"> 一般在这个钩子中做一些初始化的事，例如: 开启定时器、发送网络请求、订阅消息</code></pre></li><li>更新阶段:由组件内部this.setState()或父组件重新render触发<br> getDerivedStateFromProps<br> shouldComponentUpdate()<br> render()<br> getSnapshotBeforeUpdate()<br> componentDidUpdate()</li><li>卸载组件:由ReactDoM.unmountComponentAtNode()触发<br> componentWillUnmount() =====&gt; 常用<br> 一般在这个钩子中做一些收尾的事，例如: 关闭定时器、取消订阅消息<br><a href="jsx%E4%B8%AD%E7%9A%84this%EF%BC%8C%E5%9C%A8javascript%E4%B8%AD%EF%BC%8Cclass%E6%96%B9%E6%B3%95%E9%BB%98%E8%AE%A4%E4%B8%8D%E4%BC%9A%E7%BB%91%E5%AE%9Athis%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%BF%98%E8%AE%B0%E7%BB%91%E5%AE%9Athis.handleClick%E5%B9%B6%E6%8A%8A%E5%AE%83%E4%BC%A0%E5%85%A5%E4%BA%86onClick%EF%BC%8C%E5%BD%93%E4%BD%A0%E8%B0%83%E7%94%A8%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Cthis%E7%9A%84%E5%80%BC%E4%B8%BAundefined">Tip</a></li><li>只有类组件才有生命周期</li><li>state中尽量保持精简</li><li>我们需要的数据状态 不和视图绑定 定义成一个普通的实例属性就可以了</li><li>如果数据是组件的状态需要去影响视图 定义到state</li></ol><h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><ul><li>最小粒度是标签或者节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>    state = &#123;<br>        <span class="hljs-attr">persons</span>:[<br>            &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小张&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,<br>            &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小李&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;,<br>        ]<br>    &#125;<br>    add = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;persons&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">const</span> p = &#123;<span class="hljs-attr">id</span>:persons.<span class="hljs-property">length</span>+<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小王&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">persons</span>:[p,...persons]&#125;)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>展示人员信息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.add&#125;</span>&gt;</span>添加一个小王<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                    &#123;</span><br><span class="language-xml">                        this.state.persons.map((personObj) =&gt; &#123;</span><br><span class="language-xml">                            return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;personObj.id&#125;</span>&gt;</span>&#123;personObj.name&#125;---&#123;personObj.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                        &#125;)</span><br><span class="language-xml">                    &#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span>/&gt;</span></span>,<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getELementById</span>(<span class="hljs-string">&#x27;test&#x27;</span>)) <br></code></pre></td></tr></table></figure><h2 id="创建react项目"><a href="#创建react项目" class="headerlink" title="创建react项目"></a>创建react项目</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">$ <span class="hljs-string">npx</span> <span class="hljs-built_in">create-react-app</span> 项目名<br>$ <span class="hljs-string">cd</span> 项目名<br>$ <span class="hljs-string">yarn</span> <span class="hljs-string">start</span><br></code></pre></td></tr></table></figure><h2 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a>react脚手架</h2><ul><li>借助webpack搭建<h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3></li><li>index.html</li></ul><ol><li><meta name="viewport" content="width=device-width,initial-scale=1"/> 开启理想视口，用于做移动端适配</li><li><link rel="apple-touch-icon" href=""/> 用于指定网页添加到手机主屏幕后的图标，只支持苹果手机</li></ol><ul><li>robots.txt 爬虫文件，爬虫协议，什么可以爬什么不可以爬<h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2>ReactDOM库的作用：把React元素挂载到一个dom元素上</li></ul><p>函数形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-comment">// 挂载点</span><br>)<br>root.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>)<br></code></pre></td></tr></table></figure><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul><li>JSX 是 React.createElement 的语法糖</li><li>React.createElement用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>    string|element<br>    [propsObject]<br>    [children...]<br>)<br></code></pre></td></tr></table></figure><ul><li>渲染结果应该返回单个元素（element,或数组，或null）</li><li><code>&lt;React.Fragment&gt;</code>是react代码片段对象，用它作为节点不会产生多余的html代码输出，简写<code>&lt;&gt;...&lt;/&gt;</code></li></ul><p>JSX中的表达式</p><ul><li>使用<code>&#123;...&#125;</code>插入</li><li>表达式只能是单个语句，不能执行多个语句</li><li>JSX放在children部分的表达式不能是Object类型</li><li>条件渲染用三目运算符表达式或<code>条件 &amp;&amp; 表达式</code>方式</li><li>注释用<code>&#123;/**/&#125;</code></li><li>组件名称必须首字母大写(不是首字母大写会被认为是一般html tag)</li><li>组件元素标签书写必须闭合（符合XML标准）</li><li>html元素中的属性如果有两个单词组成应该用驼峰</li><li>特殊属性 class 变为 className，for变为htmlFor,style的属性不能是字符串而必须是object</li><li>表达式中的特殊字符如果在内容位置不希望被转义，可以用<code>dangerouslySetInnerHTML=两个大括号包着__html:&#39;...&#39;</code>方式直接设置innerHTML</li><li>渲染数组：用map方法，注意转换的JSX元素要有key，用唯一值标识元素，目的优化渲染效率</li></ul><h2 id="样式模块化"><a href="#样式模块化" class="headerlink" title="样式模块化"></a>样式模块化</h2><p>把.css变为.module.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.jsx中引入</span><br><span class="hljs-keyword">import</span> hello <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./index.module.css&#x27;</span> <br><span class="hljs-comment">// hello是随便起的名字</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;hello.title&#125;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/&gt;</span></span><br>            <span class="hljs-comment">// title是在index.module.css设置的属性</span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h4><p>键盘事件 onKeyUp<br>keyCode == 13已经被弃用可以用 event.key == ‘Enter’</p><h2 id="父传子，子传父"><a href="#父传子，子传父" class="headerlink" title="父传子，子传父"></a>父传子，子传父</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>用属性传递数据，props</p><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>用回调函数传递数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.vue</span><br>    addTodo = <span class="hljs-function">(<span class="hljs-params">todoObj</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 获取原todos</span><br>        <span class="hljs-keyword">const</span> &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-comment">// 追加一个todo</span><br>        <span class="hljs-keyword">const</span> newTodos = [todoObj,...todos]<br>        <span class="hljs-comment">// 更新状态</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">setState</span> = (&#123;<span class="hljs-attr">todos</span>:newTodos&#125;)<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123;todos&#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Header</span> <span class="hljs-attr">addTodo</span>=<span class="hljs-string">&#123;this.addTodo&#125;/</span>&gt;</span></span><br>        )<br>    &#125;<br>    <br>    <span class="hljs-comment">// 子组件</span><br>    <span class="hljs-keyword">import</span> &#123;nanoid&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br>    handleKeyUp = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 解构赋值获取KeyCode,target</span><br>        <span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">KeyCode</span>,target&#125; = event<br><br>        <span class="hljs-comment">// 判断是否是回车按键</span><br>        <span class="hljs-comment">// if(KeyCode !==13) return</span><br>        event.<span class="hljs-property">key</span> !== <span class="hljs-string">&#x27;Enter&#x27;</span> <span class="hljs-keyword">return</span> <br><br>        <span class="hljs-comment">// 添加todo的名字不能为空</span><br>        <span class="hljs-keyword">if</span>(target.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入不能为空&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 准备一个todo对象</span><br>        <span class="hljs-keyword">const</span> todoObj = &#123;<span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),<span class="hljs-attr">name</span>:target.<span class="hljs-property">value</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125;<br>        <span class="hljs-comment">// id要设置唯一值，可以用UUID</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            安装 yarn add nanoid</span><br><span class="hljs-comment">        */</span><br><br>       <span class="hljs-comment">// 将todoObj传递给App</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-title function_">addTodo</span>(todoObj)<br><br>        <span class="hljs-comment">// 清空输入</span><br>        target.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2023/03/29/aboutVue/"/>
    <url>/2023/03/29/aboutVue/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE-js框架是什么？为什么要学它"><a href="#VUE-js框架是什么？为什么要学它" class="headerlink" title="VUE.js框架是什么？为什么要学它"></a>VUE.js框架是什么？为什么要学它</h1><ul><li>vue作为国人开发的一款前端框架，不仅有强大的社区支持，很多API都是中文的，学习难度相对较小</li><li>接收用户输入的同时，很可能要及时更新视图，比如用户输入不同的内容，页面就会相对应进行更新，点击不同的选项，显示不同的状态等交互效果。（用vue更便捷）</li></ul><h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><p>视图数据混在一起冗繁复杂，把html中的dom与其他部分独立开来划分出一个层次，这个层次就叫做视图层，vue的核心库只关注视图层</p><h2 id="BTW——API"><a href="#BTW——API" class="headerlink" title="BTW——API"></a>BTW——API</h2><ul><li>例：电脑需要调用手机里的信息，用数据线进行连接，电脑和手机连接数据线的接口就是API<h3 id="API与上述例子类似又不尽相同"><a href="#API与上述例子类似又不尽相同" class="headerlink" title="API与上述例子类似又不尽相同"></a>API与上述例子类似又不尽相同</h3></li><li>定义：应用程序接口，是一些预先定义的接口（如函数，http接口），或软件系统不同组成部分衔接的约定）</li><li>应用场景：<ul><li>接口：前后端交互</li><li>提供应用程序与开发人员基于某软件或硬件得以访问的一组历程，而又无需访问源码<br>例：程序员B想调用A中的部分功能又不想从头看一遍A的源码和功能实现过程，这时候把A需要的功能打包好，写成一个函数！！！按照B说的流程把函数放在B中就可以直接使用功能了</li></ul></li></ul><h1 id="vue是什么？"><a href="#vue是什么？" class="headerlink" title="vue是什么？"></a>vue是什么？</h1><ul><li>定义：以数据驱动视图的MVVM渐进式框架<ul><li>数据：对象</li><li>视图：dom标签 –&gt; 虚拟dom</li><li>MVVM：M model模型，V view视图。就是一种框架架构，model-view view-model， 这样的结构，主要优势在于监控者数据双向绑定的特性，vue和model之间是双向数据传递的。视图改变数据就可以改变，数据改变视图就可以改变。</li><li>渐进式：轻量级框架，可以选择性的，只使用vue中很少的一部分，而不是必须使用全部</li></ul></li></ul><h2 id="BTW——MVC和MVVM"><a href="#BTW——MVC和MVVM" class="headerlink" title="BTW——MVC和MVVM"></a>BTW——MVC和MVVM</h2><ul><li>MVVM有两个方向：<ol><li>将model（模型）转化成 view（视图），即后端传递的数据转化成所看到的页面。实现方式为数据绑定</li><li>将view（视图）转化成 model（模型），即将所看的页面转化成后端的数据。实现方式为dom监听事件</li></ol></li><li>什么是mvc?<ul><li>MVC是model-view-controller的缩写，即模型——视图——控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</li></ul></li><li>区别：<ul><li>MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，只不过是弱化了C的概念，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。</li><li>View更新的时候，必须要通过Controller去更新一遍Model；同样的Model更新的时候，也要去更新一遍视图。</li></ul></li></ul><h2 id="vue-js核心？"><a href="#vue-js核心？" class="headerlink" title="vue.js核心？"></a>vue.js核心？</h2><ul><li>官方定义：通过尽可能简单的API实现响应的数据绑定和组合的视图组件<h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2></li><li>传统js手动改变DOM来改变视图，vue.js只需要改变数据就会自动改变视图，就是MVVM思想的实现<h2 id="视图组件化"><a href="#视图组件化" class="headerlink" title="视图组件化"></a>视图组件化</h2></li><li>定义：把网页拆分一个个区块，每个区块我们可以看成一个组件。网页由多个组件拼接或嵌套组成<h2 id="vue的特点"><a href="#vue的特点" class="headerlink" title="vue的特点"></a>vue的特点</h2></li><li>响应式编程：编写代码基于对变化的反应</li><li>组件化<h3 id="组件和模块"><a href="#组件和模块" class="headerlink" title="组件和模块"></a>组件和模块</h3></li><li>组件：把重复代码提取出来合并成为一个组件，组件最重要的是复用，位于框架最底层，其他功能依赖于组件，可供不同功能使用，独立性强</li><li>模块：分属同一功能/业务的代码进行隔离（分装）成独立的模块，可以独立运行，以页面、功能或其他不同粒度划分程度不同的模块。位于业务框架层，模块间通过接口调用，目的是降低模块间的耦合，由之前的主应用与模块耦合，变为主应用与接口耦合，接口与模块耦合<br>[比喻]模块就像有多个USB插口的充电宝，可以和多部手机充电，接口可以随意插拔。复用性很强，可以独立管理。</li><li>组件化模块化区别？<ul><li><ol><li>组件相当于库，把一些能在项目里或者不同类型项目中可复用的代码进行封装</li></ol></li><li><ol start="2"><li>而模块相当于业务逻辑模块，把同一类型项目里的功能逻辑进行需求性的封装</li></ol></li></ul></li><li>为什么要用组件和模块<ul><li>开发和调式效率高</li><li>可维护性强</li><li>避免阻断</li><li>版本管理更容易</li></ul></li></ul><h2 id="vue的优缺点？"><a href="#vue的优缺点？" class="headerlink" title="vue的优缺点？"></a>vue的优缺点？</h2><ul><li>优点：轻量级框架，数据双向绑定，组件化，虚拟dom，运行速度快</li><li>缺点：<ul><li>不支持ie678</li><li>生态环境差不如angular和react</li><li>社区不大</li><li>无高阶书籍</li><li>首屏加载速度满，加载时，将所有的css,js文件进行加载<h3 id="BTW——首屏加载慢解决方式"><a href="#BTW——首屏加载慢解决方式" class="headerlink" title="BTW——首屏加载慢解决方式"></a>BTW——首屏加载慢解决方式</h3></li></ul></li><li>减少入口文件体积</li><li>UI框架按需引入</li><li>静态资源本地缓存</li><li>图片资源压缩</li><li>组件重复打包</li><li>使用SSR（通过对文件、目录、进程、注册表和服务的强制访问控制，有效的制约和分散了原有系统管理员的权限）<h3 id="BTW——粒度和耦合"><a href="#BTW——粒度和耦合" class="headerlink" title="BTW——粒度和耦合"></a>BTW——粒度和耦合</h3></li><li>粒度：计算机中常指系统内存扩展增量的最小值。粒度问题是设计数据仓库的一个最重要方面。粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别。细化程度越高，粒度级就越小；相反，细化程度越低，粒度级就越大。数据的粒度一直是一个设计问题。</li><li>耦合：两个东西通过某种作用连接在了一起</li></ul><h1 id="vue核心的底层原理"><a href="#vue核心的底层原理" class="headerlink" title="vue核心的底层原理"></a>vue核心的底层原理</h1><ul><li><p>Object.defineProperty数据劫持的API</p></li><li><p>Object.defineProperty定义新属性或修改原有的属性，vue的数据双向绑定原理就是Object.defineProperty，里面定义了setter和getter方法，通过观察者模式(发布订阅模式)来监听数据变化，从而做相应的逻辑处理</p></li><li><p>监听对象属性变化，只关心数据不关心视图</p></li><li><p>三个参数- 三个参数Object.defineProperty(object,propName,descriptor)</p><ul><li>object 对象=&gt;给谁加</li><li>propName 属性名=&gt;需要加的属性的名字[类型:String]</li><li>descriptor 属性描述=&gt;加的这个属性有什么特性[类型：Object]</li><li>方法就是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</li></ul></li><li><p>属性描述符</p><ul><li>configurable: true 配置可删除，默认false<ul><li>两个作用：<ol><li>目标属性是否可以使用delete删除</li><li>目标属性是否可以再次设置特性</li></ol></li></ul></li><li>writable：true 配置可修改，默认false</li><li>enumerable:true 可枚举，使用(for…in或Object,keys())默认false</li><li>value属性对应的值，可以是任意类型的值，默认undefined</li><li>缺点：数组的长度<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// writable应用</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Person</span> = &#123;&#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Person</span>,<span class="hljs-string">&#x27;name&#x27;</span>,&#123;<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;Jack&#x27;</span>,<br>        <span class="hljs-comment">// writable:true // 加上这个就可以输出&#123;name:&#x27;Rose&#x27;&#125;</span><br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>) <span class="hljs-comment">// &#123;name:&#x27;Jack&#x27;&#125;</span><br>    <span class="hljs-title class_">Person</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Rose&#x27;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>) <span class="hljs-comment">//undefined,因为writable默认false</span><br><span class="hljs-comment">// enumerable应用</span><br>    <span class="hljs-keyword">var</span> user=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小五&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;24&#x27;</span>&#125;;<br>    <span class="hljs-comment">// es6</span><br>        <span class="hljs-keyword">var</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(user)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keys) <span class="hljs-comment">// [&#x27;name&#x27;,&#x27;age&#x27;]</span><br>    <span class="hljs-comment">// es5</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Key</span> = []<br>        <span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> user) &#123;<br>            <span class="hljs-title class_">Key</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Key</span>)<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Key</span>) <span class="hljs-comment">// [&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class="hljs-comment">// configurable应用</span><br>    <span class="hljs-keyword">var</span> human=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;不详&#x27;</span>&#125;；<br>    <span class="hljs-comment">// 定义一个性别，不可被删除和重新定义特性</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(human,<span class="hljs-string">&#x27;gender&#x27;</span>,&#123;<br>            <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<br>            <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">configurable</span>:<span class="hljs-literal">false</span><br>        &#125;)<br>    <span class="hljs-comment">// 删除一下</span><br>        <span class="hljs-keyword">delete</span> human.<span class="hljs-property">gender</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(human)<span class="hljs-comment">//&#123;name:&quot;李白&quot;,age:&quot;不详&quot;,gender:&quot;男&quot;&#125; 并没有删除</span><br>    <span class="hljs-comment">// 重新定义特性</span><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(human,<span class="hljs-string">&#x27;gender&#x27;</span>,&#123;<br>            <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;男&#x27;</span>,<br>            <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span><br>        &#125;)<br>        <span class="hljs-keyword">delete</span> human.<span class="hljs-property">gender</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(human) <span class="hljs-comment">// &#123;name:&quot;李白&quot;,age:&quot;不详&quot;&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>存取描述符<br>  get</p><pre><code class="hljs">  一个给属性提供 getter 的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。getter就是获取属性值</code></pre><p>  set</p><pre><code class="hljs">  一个给属性提供 setter 的方法，如果没有setter则为undefined。该方法将接收唯一参数，并将该参数的新值分配给属性。默认为undefined。setter就是设置属性值</code></pre><p>[!注意]：1. 当使用getter或setter方法，不允许使用writable和value这两个属性</p><pre><code class="hljs">  2. get或set不是必须成对出现，任写其一就行。如果不设置方法，get和set默认undefined</code></pre><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> username = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;不想起名了&quot;</span>&#125;;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">12</span><br><span class="hljs-comment">// 定义一个age获取值时返回定义好的变量</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(username,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>        <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> num<br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username.<span class="hljs-property">age</span>);<span class="hljs-comment">//12</span><br><span class="hljs-comment">// 定义一个age获取值时返回定义好的变量num</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(username,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>        <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> num<br>        &#125;<br>        <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>) &#123;<br>            num = newVal<br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username.<span class="hljs-property">age</span>);<span class="hljs-comment">// 12</span><br>    username.<span class="hljs-property">age</span> = <span class="hljs-number">145</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username.<span class="hljs-property">age</span>); <span class="hljs-comment">// 145</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num); <span class="hljs-comment">// 145</span><br></code></pre></td></tr></table></figure></li><li><p>兼容性：IE8以下不行</p></li><li><p>使用Object.defineProperty的优点</p><ol><li>减少代码（少了dom,不需要写很多dom）</li><li>开发速度快</li></ol></li></ul><h3 id="BTW——数据劫持"><a href="#BTW——数据劫持" class="headerlink" title="BTW——数据劫持"></a>BTW——数据劫持</h3><ul><li>定义：修改或访问对象的属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</li></ul><h1 id="vue环境搭建"><a href="#vue环境搭建" class="headerlink" title="vue环境搭建"></a>vue环境搭建</h1><ul><li>环境需要:nodejs 检测cmd:node-v</li><li>安装全局脚手架:<code>npm i -g @vue/cli</code> 检测：vue-V<code>yarn global add @vue/cli</code></li><li>脚手架网站:cli.vuejs.org</li><li>vue官网: vuejs.org</li></ul><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><p>【注意】:项目名称不能是中文，不能是大写字母，不能用vue做名字</p><h3 id="命令运行方式"><a href="#命令运行方式" class="headerlink" title="命令运行方式"></a>命令运行方式</h3><p><code>vue create name</code></p><h3 id="gui图形化方式"><a href="#gui图形化方式" class="headerlink" title="gui图形化方式"></a>gui图形化方式</h3><p><code>vue ui</code></p><h2 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h2><ul><li>定义:vue的cli脚手架底层是webpack,也就是基于webpack封装的<br>  [官网]（<a href="http://cli.vuejs.org)/">http://cli.vuejs.org）</a><h2 id="BTW——是脚手架？"><a href="#BTW——是脚手架？" class="headerlink" title="BTW——是脚手架？"></a>BTW——是脚手架？</h2></li></ul><ol><li>什么是脚手架？<ul><li>构建基于数据库的应用，进行增、删、改、查数据库的操作</li></ul></li><li>Vue-CLi是什么？<ul><li>是vuejs脚手架工具，就是自动帮你生成好项目目录，配置好webpack，以及各种依赖包工具</li><li>为什么要用？可以帮助你快速开启一个vue项目，给你一套文件结构，包含基础的依赖库，只需要npm install 一下就可以安装，不需要为编译或其他琐碎事而浪费时间，而且不会限制到你发挥<h2 id="脚手架配置"><a href="#脚手架配置" class="headerlink" title="脚手架配置"></a>脚手架配置</h2></li></ul></li></ol><ul><li>vue.config.js文件是脚手架配置文件，该文件必须放在项目的根目录里<h3 id="请求代理【跨域方案】"><a href="#请求代理【跨域方案】" class="headerlink" title="请求代理【跨域方案】"></a>请求代理【跨域方案】</h3>脚手架-&gt;webpack-&gt;nodejs【后端】<br>使用后端转发请求<br>【注意】只能在开发环境中使用<br>【使用场景】在公司里和后端的测试接口进行接口调式使用<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">devServer</span>:&#123;<br>        <span class="hljs-comment">// 浏览器自动打开</span><br>        <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 代理</span><br>        <span class="hljs-attr">proxy</span>:&#123;<br>            <span class="hljs-string">&quot;/api&quot;</span>:&#123;<br>                <span class="hljs-attr">target</span>:<span class="hljs-string">&quot;http://xx.com&quot;</span>,<br>                <span class="hljs-attr">changeOrigin</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">pathRewrite</span>:&#123;<br>                    <span class="hljs-string">&quot;^/api&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>                &#125;,<br>            &#125;,<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关闭源码映射【性能优化】"><a href="#关闭源码映射【性能优化】" class="headerlink" title="关闭源码映射【性能优化】"></a>关闭源码映射【性能优化】</h3></li><li>productionSourceMap:false<br>  打包的时候，每一个js文件对应生成一个map源码映射文件，它在生产环境中时没有用的。它会增加打包时间，浪费磁盘空间，以及容易造成代码泄漏等问题，因此需要在生产环境中关闭，只允许开发环境中开启<h3 id="关闭eslint代码校验"><a href="#关闭eslint代码校验" class="headerlink" title="关闭eslint代码校验"></a>关闭eslint代码校验</h3></li><li>lintOnSave:false<h2 id="AIA：脚手架配置有哪些？"><a href="#AIA：脚手架配置有哪些？" class="headerlink" title="AIA：脚手架配置有哪些？"></a>AIA：脚手架配置有哪些？</h2></li></ul><ol><li>代码校验</li><li>代码映射的开启与关闭</li><li>请求代理vue.config.js</li></ol><h1 id="vue项目结构"><a href="#vue项目结构" class="headerlink" title="vue项目结构"></a>vue项目结构</h1><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><ul><li>项目根目录里有一个package.json文件，该文件有一个script对象，里面就是自定义运行命令。（是这三个里唯一一个可以删的）</li><li>serve开发环境，写代码时的环境</li><li>build生产环境，打包发布时的环境<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2></li><li><ul><li>node_modules它是项目运行时必须依赖</li></ul></li><li>public公共目录，存放着唯一的html模板</li><li>src【核心-源码】项目所有代码</li><li>.gitignore过滤掉git仓库里不需要的文件清单</li><li>babel.config.js把es6转成es5</li><li>package.lock.json(可以删但一般留着)，锁定依赖版本号</li><li>package.json【核心】依赖包管理文件</li><li>README.md说明书<h3 id="src源码结构"><a href="#src源码结构" class="headerlink" title="src源码结构"></a>src源码结构</h3></li><li>assets存放静态资源：图片，css,js脚本</li><li>component放组件</li><li>App.vue根组件，第一个被加载的组件</li><li>main.js入口文件，第一个被执行的文件<h2 id="模块化开发【vue核心亮点】"><a href="#模块化开发【vue核心亮点】" class="headerlink" title="模块化开发【vue核心亮点】"></a>模块化开发【vue核心亮点】</h2>把一切重复使用的资源，无论是图片，样式还是js代码抽离出来，作为单独的’模块’进行复用</li><li>模块包含：vue 组件，图片，js 脚本，css 样式，字体等都可以是模块。<h2 id="vue里的模块化组件开发"><a href="#vue里的模块化组件开发" class="headerlink" title="vue里的模块化组件开发"></a>vue里的模块化组件开发</h2></li><li><ol><li>组件必须使用import引入到当前组件</li></ol></li><li><ol start="2"><li>当前组件的components必须挂载引入的组件</li></ol></li><li><ol start="3"><li>在当前组件的template里用标签的形式使用挂载的组件</li></ol></li></ul><h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><ul><li>渲染文本</li><li>写在两个大括号中间<h2 id="插值语法可以写哪些值"><a href="#插值语法可以写哪些值" class="headerlink" title="插值语法可以写哪些值"></a>插值语法可以写哪些值</h2></li><li>对象、字符串、数字、数组、布尔值、三元表达式、自执行函数等，凡是具有返回值的都可以，全部变成文本渲染出来  </li></ul><h2 id="BTW——自执行函数和快速删除文件"><a href="#BTW——自执行函数和快速删除文件" class="headerlink" title="BTW——自执行函数和快速删除文件"></a>BTW——自执行函数和快速删除文件</h2><h4 id="自执行函数后面-（）"><a href="#自执行函数后面-（）" class="headerlink" title="自执行函数后面+（）"></a>自执行函数后面+（）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="为什么用自执行函数而不是函数"><a href="#为什么用自执行函数而不是函数" class="headerlink" title="为什么用自执行函数而不是函数"></a>为什么用自执行函数而不是函数</h2><p>用函数也可以，只不过返回时function(){return 1000},而不是1000</p><h2 id="插值语法的作用"><a href="#插值语法的作用" class="headerlink" title="插值语法的作用"></a>插值语法的作用</h2><ol><li>四则运算 100+(200*300)/2</li><li>插值里存放变量 (详情请找baseVue.html)</li></ol><h4 id="npkill和rimraf快速删除node-modules包"><a href="#npkill和rimraf快速删除node-modules包" class="headerlink" title="npkill和rimraf快速删除node_modules包"></a>npkill和rimraf快速删除node_modules包</h4><ol><li>全局安装npm i -g npkill</li><li>进入想清理的文件夹</li><li>cd文件路径</li><li>输入npkill</li><li>会自动查找文件中node_modules</li><li>光标上下移动来选择要清理的目录，释放宝贵的空间</li><li>按空格删除</li></ol><h1 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a>内置方法</h1><h2 id="set添加或修改对象和数组"><a href="#set添加或修改对象和数组" class="headerlink" title="$set添加或修改对象和数组"></a><code>$set</code>添加或修改对象和数组</h2><p>添加/修改对象的属性 <code>$set(obj,&#39;name&#39;,1)</code><br>添加或修改数组成员<code>$set(arr,index,val)</code></p><h2 id="delete删除对象和数组"><a href="#delete删除对象和数组" class="headerlink" title="$delete删除对象和数组"></a><code>$delete</code>删除对象和数组</h2><ul><li>删除对象属性<code>$delete(obj,name)</code></li><li>删除数组成员<code>$delete(arr,index)</code><h2 id="emit派发一个动作向上级通信"><a href="#emit派发一个动作向上级通信" class="headerlink" title="$emit派发一个动作向上级通信"></a><code>$emit</code>派发一个动作向上级通信</h2><h2 id="mount手动挂载方法"><a href="#mount手动挂载方法" class="headerlink" title="$mount手动挂载方法"></a><code>$mount</code>手动挂载方法</h2></li></ul><h1 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h1><ul><li>props接收上游绑定的属性<h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2></li><li>数组：<code>[&#39;list&#39;]</code></li><li>对象:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">props</span>:&#123;<br>    <span class="hljs-attr">list</span>:&#123;<br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">Array</span>,<br>        <span class="hljs-comment">// 针对数组或对象需要函数</span><br>        <span class="hljs-attr">default</span>:<span class="hljs-function">() =&gt;</span> [] <span class="hljs-comment">//default是没有任何值的时候默认的值，保证你需要该属性的时候不是undefined</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>父组件要正向地向子组件传递数据或参数，子组件收到后，根据传递过来的数据不同，渲染不同的页面内容，或者执行操作。这个正向传递数据的过程是通过props来实现的。子组件使用props来声明需要从父组件接收的数据<br>[!注意]：</li></ul><ol><li><p>不应该在一个子组件内部改变 prop，这样会破坏单向的数据绑定，导致数据流难以理解。如果有这样的需要，可以通过 data 属性接收或使用 computed 属性进行转换。</p></li><li><p>如果 props 传递的是引用类型(对象或者数组)，在子组件中改变这个对象或数组，父组件的状态会也会做相应的更新，利用这一点就能够实现父子组件数据的“双向绑定”，虽然这样实现能够节省代码，但会牺牲数据流向的简洁性，令人难以理解，最好不要这样去做。</p></li><li><p>prop只读不可修改</p></li><li><p>想要实现父子组件的数据“双向绑定”，可以使用 v-model 或 .sync</p></li></ol><h2 id="两种常见的试图变更一个prop的情形"><a href="#两种常见的试图变更一个prop的情形" class="headerlink" title="两种常见的试图变更一个prop的情形"></a>两种常见的试图变更一个prop的情形</h2><ul><li>这个prop用来传递一个初始值这个子组件接下来希望将其作为一个本地的prop数据来使用。在这种情况下，最好定义一个本地的data property并将这个prop用作其初始值</li><li>这个prop以一种原始的值传入且需要转换。在这种情况下，最好使用这个prop的值来定义一个计算属性</li></ul><h1 id="scss动态生成类名（待写11-26scss动态生成类名-vue）"><a href="#scss动态生成类名（待写11-26scss动态生成类名-vue）" class="headerlink" title="scss动态生成类名（待写11.26scss动态生成类名.vue）"></a>scss动态生成类名（待写11.26scss动态生成类名.vue）</h1><p>例如：有一p标签，起一个class名为m-l-10<br>     <!-- 在export default中     @for $name from 1 through 100 {        .m-l-#{$name} {            margin-left:$name+px        }     } --></p><h1 id="v-指令"><a href="#v-指令" class="headerlink" title="v-指令"></a>v-指令</h1><h2 id="什么是指令？"><a href="#什么是指令？" class="headerlink" title="什么是指令？"></a>什么是指令？</h2><p>是带有v-前缀的特殊属性，通过属性来操作元素</p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>因为vue是单向数据流，所以v-model在input上只是语法糖而已<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 第一行代码是第二行的语法糖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sth&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;sth&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;sth=$event.target.value&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 理解上述代码</span><br><span class="hljs-comment">    input本身有个oninput事件，这是h5新增，类似onchange,每当输入框内容发生变化的时候，就会触发oninput，把最新的value传递给sth</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 所以</span><br><span class="hljs-comment">在给&lt;input/&gt;元素添加v-model属性时，默认会把value作为元素的属性，然后把&#x27;input&#x27;事件作为实时传递value的触发事件 --&gt;</span><br></code></pre></td></tr></table></figure></li><li>用在组件上<br> 给组件加v-model，默认会把value作为组件的属性，然后把’input’值作为给组件绑定事件的事件名<h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">Cur-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Cur-input</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;)$event.target.value&quot;</span>&gt;</span><br>export default &#123;<br>    data:&#123;price:100&#125;,<br>    props:[&#x27;value&#x27;]<span class="hljs-comment">&lt;!-- 这里为什么用value？--&gt;</span><br>&#125;<br>【问题解答】：<br><span class="hljs-tag">&lt;<span class="hljs-name">Cur-input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;price&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;price=arguments[0]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Cur-input</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-model缺点及解决办法"><a href="#v-model缺点及解决办法" class="headerlink" title="v-model缺点及解决办法"></a>v-model缺点及解决办法</h3></li><li>在创建类似复选框或单选框这种常见的组件时，v-model就不好用了。因为不需要value属性而是checked属性，并且当你点击这个单选框的时候不会触发oninput事件，它只会触发onchange事件。</li></ul><p>[!注意]v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。应通过 JavaScript 在组件的 data 选项中声明初始值。</p><h3 id="表单的使用——专用指令-v-model"><a href="#表单的使用——专用指令-v-model" class="headerlink" title="表单的使用——专用指令:v-model"></a>表单的使用——专用指令:v-model</h3><p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value 属性和 input 事件；（默认）</li><li>radio单选框<ul><li>checkbox 和 radio 使用 checked 属性和 change 事件；(单个复选框，绑定到布尔值，多个复选框，绑定到同一个数组：)</li><li>语法：<code>&lt;input type=&#39;radio&#39; v-model=&#39;radio&#39; value=&#39;1&#39;/&gt;</code></li></ul></li><li>select下拉菜单<ul><li>select 字段将 value 作为 prop 并将 change 作为事件。</li><li>语法<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;selected&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;1000&#x27;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="BTW——语法糖-onchange-input"><a href="#BTW——语法糖-onchange-input" class="headerlink" title="BTW——语法糖 onchange @input"></a>BTW——语法糖 onchange @input</h2></li></ul></li></ul><ol><li>语法糖：用更简练的言语表达较复杂的含义</li><li>onchange事件<ul><li>定义：事件会在域的内容改变时发生</li><li>可用于单选框与复选框改变后触发的事件</li><li>语法:input type=”text” onchange=”myFunction()</li></ul></li><li>@input一般用于监听事件，只要输入的值变化了就会触发input，而@click是事件触发事件</li></ol><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul><li>控制元素显示与隐藏，但是元素的dom节点一直存在页面中的，他的底层原理是控制css的display属性</li><li>当频繁切换元素显示隐藏的时候，优先使用v-show<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 条件渲染v-show</span><br><span class="hljs-comment">    控制css display样式，dom节点是存在于页面中的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;flag()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;see&quot;</span>&gt;</span>我可以被显示吗<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">see</span>:<span class="hljs-literal">false</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">flag</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">see</span> =! <span class="hljs-variable language_">this</span>.<span class="hljs-property">see</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2></li><li>它是控制元素的加载(渲染)和销毁，底层是删除或者加载出dom</li><li>它还有v-else-if和v-else但是后面两个不能单独使用</li><li>它是条件控制语句，它只要有一个符合条件，则后面的v-else-if和v-else就不执行判断</li><li>适合用于多条件判断渲染<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 多条件切换的时候使用 v-if --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;index=1&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;index=2&quot;</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;index=3&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 面板 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;index==1&quot;</span>&gt;</span>我是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;index==2&quot;</span>&gt;</span>我是新闻<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>我是关于<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//1.首页 2.新闻 3.关于</span></span><br><span class="language-javascript">                <span class="hljs-attr">index</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2></li><li>定义：绑定属性的，可以绑定原生属性和自定义属性</li><li>缩写<code>:</code></li><li>修饰符<ul><li>prop把标签上的属性隐藏</li><li>sync把数据变成为双向绑定(与v-model类似，v-model只能用于对象否则会警告，这个可以解决基本数据类型不是双向绑定问题)</li></ul></li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;doc.title&quot;</span> <span class="hljs-attr">v-on:update:title</span>=<span class="hljs-string">&quot;doc.title=$event&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上述代码用.sync可以写为 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-bind:title.sync</span>=<span class="hljs-string">&quot;doc.title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 在子组件中，可以通过下面代码实现对prop重新赋值 --&gt;</span><br>this.$emit(&#x27;update:title&#x27;,newTitle)<br></code></pre></td></tr></table></figure><p>[AIA]</p><ul><li>父组件使用 sync 修饰绑定的属性<br>  <code>v-bind:prop.sync=data</code></li><li>子组件使用固定语法<br>  <code>$emit(&#39;update:prop&#39;,value)</code><h3 id="BTW——-emit-mount"><a href="#BTW——-emit-mount" class="headerlink" title="BTW——$emit $mount"></a>BTW——$emit $mount</h3></li><li><code>$emit</code>  派发一个动作向上级通信</li><li><code>$mount</code> 手动挂载方法</li></ul><ul><li>语法<ul><li>绑定样式  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;&#123;name:true|false&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>绑定自定义  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li>样例<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- v-bind:绑定属性的指令 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">kkk</span>=<span class="hljs-string">&quot;hahah&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">            img标签?dom元素=dom对象</span><br><span class="hljs-comment">            src 对于img原始的属性</span><br><span class="hljs-comment">            kkk 对于img，自定义属性</span><br><span class="hljs-comment">            v-bind:既可以绑定原始和自定义属性     </span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 绑定背景图 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:500px;border:1px solid red&quot;</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">&quot;&#123;background:`url($&#123;logo&#125;)`&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 绑定class类名</span><br><span class="hljs-comment">        v-on:click=&#x27;回调函数/表达式&#x27; --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&#x27;&#123;active:n&#125;&#x27;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&#x27;n=n ? false :1&#x27;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用对象包着是因为，对象里可以绑定很多class名 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//引入图片</span></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> src <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../assets/logo.png&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// console.log(src)</span></span><br><span class="language-javascript"><span class="hljs-comment">//若引入很多张图片 脚手架-&gt;基于webpack-&gt;基于nodejs 所以可以使用nodejs里的require</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> img= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../assets/logo.png&#x27;</span>);<span class="hljs-comment">// 直接在export中输出require(&#x27;../../assets/logo.png&#x27;)不用写这个</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 任何文件都是模块</span></span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">n</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//true是绑定，false是不要</span></span><br><span class="language-javascript">            <span class="hljs-comment">// logo:&#x27;../../assets/logo.pn&#x27;,这个卸载这里出不来放到import中，这里logosrc</span></span><br><span class="language-javascript">            <span class="hljs-attr">logo</span>:src,<span class="hljs-comment">// 对应import</span></span><br><span class="language-javascript">            <span class="hljs-attr">logo</span>:<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../assets/logo.pn&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-comment">/* 高亮颜色 */</span></span><br><span class="language-css">    <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>:red;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:white;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2></li><li>定义：事件绑定指令，可以绑定原生事件和自定义事件</li><li>缩写：<code>@</code></li><li>语法：<code>v-on:click=&#39;callBack&#39;</code></li><li>修饰符：<ul><li>.stop 清除事件冒泡</li><li>.prevent 阻止默认行为</li><li>.once 绑定一次函数</li><li>.native 绑定原始事件</li><li>.passive 告诉浏览器不想阻止默认行为</li></ul></li><li>event事件对象<ul><li>target 事件触发的元素</li><li>currentTarget 事件绑定的元素<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3></li></ul></li><li>由程序决定触发时机的自定义事件</li><li>语法:绑定：<code>@myEvent=&#39;callBack&#39;</code><pre><code class="hljs">调用：`$emit(&#39;callBack&#39;,参数)`</code></pre></li><li>应用场景：父子组件通信的时候<h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2></li><li>底层是innerText</li><li>定义：渲染文本内容，无论写入什么值，最后都被渲染成文本内容</li><li>和插值<code>&#123;&#123;&#125;&#125;</code>基本一致</li><li>为什么有v-text还要有插值语法？<br>v-text覆盖内容，插值语法就是个占位符，用插值偏多<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2></li><li>定义：用于渲染dom片段的</li><li>底层：innerHTML<br>二者区别：v-html可以转义标签和渲染数据，v-text不能转义标签只能渲染数据<br>  v-html 你好<br>  v-text $lth2$gt你好$lt/h2$gt<h2 id="v-for循环渲染"><a href="#v-for循环渲染" class="headerlink" title="v-for循环渲染"></a>v-for循环渲染</h2></li><li>基础语法:<code>v-for=&#39;val in data&#39; key=&#39;val&#39;</code></li><li>获取下标:<code>v-for=&#39;(val,index) in data&#39; :key=&#39;index&#39;</code></li><li>遍历对象：<code>v-for=(val,key,index) in obj</code></li><li>[!注意]key一定不可以是随机数，时间戳，因为值不固定，随时发生改变，key的值必须唯一。随机数时间戳不固定，刷新一次改变一次</li><li>data:对象，数组，数字，字符串</li><li>key=’值必须唯一’当前元素的身份，标识，用来优化diff算法进行dom修改</li><li>虚拟dom和diff算法<ul><li>虚拟dom是js动态生成的，是js根据算法得出的</li><li>diff算法，执行规则：同层对比，新旧dom对比，当发现有不同之处，直接用新的dom替换旧的dom部分，diff算法超级快<h2 id="v-slot-详情搜索插槽"><a href="#v-slot-详情搜索插槽" class="headerlink" title="v-slot(详情搜索插槽)"></a>v-slot(详情搜索插槽)</h2></li></ul></li><li>绑定插槽的指令</li><li>作用域插槽、具名插槽和默认插槽</li><li>缩写：<code>#</code><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2>永远只显示第一次渲染的值，让数据失去双向响应。它会让被绑定的元素不再进入diff对比，不更新。从而节省了虚拟dom的计算<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2>原格式输出内容，不会让元素内的内容解析<h2 id="v-clock"><a href="#v-clock" class="headerlink" title="v-clock"></a>v-clock</h2>防止插值语法的闪烁问题，插值里的数据如果默认是空的，需要等接口返回才显示的话，页面内容的高随着内容撑开导致页面抖动</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-clock</span>&gt;</span>&#123;message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-attr">[v-clock]</span> &#123;<span class="hljs-attribute">display</span>:none;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>广义：事物发展的阶段</li><li>具体例子：人的生老病死</li><li>页面加载的过程：初始化，渲染，更新，销毁</li><li>官方定义：钩子函数(生命周期就等于钩子函数)<h2 id="页面加载的过程：初始化，渲染，更新，销毁"><a href="#页面加载的过程：初始化，渲染，更新，销毁" class="headerlink" title="页面加载的过程：初始化，渲染，更新，销毁"></a>页面加载的过程：初始化，渲染，更新，销毁</h2>  诞生：入口函数，当页面完全加载出来，才执行<pre><code class="hljs">  window.onload</code></pre>  去世：当页面被关闭的时候执行，卸载<pre><code class="hljs">  window.onunload</code></pre>  更新：重新加载，页面要发生变化<pre><code class="hljs">  window.onreload</code></pre></li></ul><h2 id="生命周期作用是什么？"><a href="#生命周期作用是什么？" class="headerlink" title="生命周期作用是什么？"></a>生命周期作用是什么？</h2><p>Vue 所有的功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。</p><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><p>预加载资源，骨架屏，上传日志等操作</p><h4 id="创建前-beforeCreate"><a href="#创建前-beforeCreate" class="headerlink" title="创建前 beforeCreate"></a>创建前 beforeCreate</h4><ul><li>vue对象创建之前触发的函数</li><li>此阶段为实例化初始后，this指向创建的实例，数据观察，数据监听事件机制都未形成，不能获dom节点。data，computed，watch，methods上的方法和数据都不能访问</li><li>因为data和methods数据都还未初始化<h4 id="创建后-created"><a href="#创建后-created" class="headerlink" title="创建后 created"></a>创建后 created</h4></li><li>vue对象创建完成触发的函数</li><li>实例初始化之后，data，props，computed导入完成</li><li>要调用methods方法，或者操作data的数据最早只能在created中操作</li><li>可以访问watch、methods、computed、data上的数据和方法<h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><!-- 挂载是眼睛可以看见了，就代表已经挂载 --><h4 id="挂载前-beforeMount"><a href="#挂载前-beforeMount" class="headerlink" title="挂载前 beforeMount"></a>挂载前 beforeMount</h4></li><li>vue对象开始挂载数据的时候触发的函数</li><li>这个阶段是过渡性的，一般一个项目只能用到一两次。<h4 id="挂载后-mounted"><a href="#挂载后-mounted" class="headerlink" title="挂载后 mounted"></a>挂载后 mounted</h4></li><li>vue对象挂载完成的时候触发的函数</li><li>完成创建vm.$el，和双向绑定只要执行完mounted,就表示整个Vue实例已经初始化完成了，此时组件已经脱离里了创建阶段， 进入到了运行阶段。</li><li>这个时候dom在页面呈现了，你可以获取dom，一般用于ajax自动发起请求数据<h3 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h3>更新前还可以对数据进行二次修改，更新后只能是观察数据变化。当data或者props更新或者上游组件更新的时候触发<h4 id="更新前-beforeUpdate"><a href="#更新前-beforeUpdate" class="headerlink" title="更新前 beforeUpdate"></a>更新前 beforeUpdate</h4></li><li>vue对象中的data数据发生改变之前触发的函数</li><li>当执行beforeUpdate的时候，页面中显示的数据还是旧的，此时date数据是最新的，页面尚未和最新数据数据保持同步。但是DOM中的数据会改变，这是vue双向数据绑定的作用，可在更新前访问现有的DOM，如手动移出添加的事件监听器。<h4 id="更新后-updated"><a href="#更新后-updated" class="headerlink" title="更新后 updated"></a>更新后 updated</h4></li><li>vue对象中的data数据发生改变完成触发的函数</li><li>Updated执行时数据已经保持同步了，都是最新的，完成虚拟DOM的重新渲染和打补丁。</li><li>组件DOM已完成更新，可执行依赖的DOM操作。</li><li>不要在此函数中操作数据（修改属性），否则就会陷入死循环。<h4 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h4>主要用于销毁常驻内存的垃圾，比如定时器，或者全局变量<h4 id="销毁前-beforeDestroy"><a href="#销毁前-beforeDestroy" class="headerlink" title="销毁前 beforeDestroy"></a>销毁前 beforeDestroy</h4></li><li>vue对象销毁之前触发的函数</li><li>该组件还存在</li><li>当执行beforeDestroy的时候，Vue实例就已经从运行阶段进入到销毁阶段了。实例上的所有date和methods以及过滤器和指令都是处于可用状态，此时还没有真正的执行销毁过程。<h4 id="销毁后-destroyed"><a href="#销毁后-destroyed" class="headerlink" title="销毁后 destroyed"></a>销毁后 destroyed</h4></li><li>vue对象销毁完成触发的函数</li><li>指令解绑和事件解绑以及子组件销毁完毕<h4 id="errorCaptured捕获后代组件错误"><a href="#errorCaptured捕获后代组件错误" class="headerlink" title="errorCaptured捕获后代组件错误"></a>errorCaptured捕获后代组件错误</h4></li><li>当组件发生错误时，会被该函数捕获</li><li>该函数有三个参数，第一个错误本身信息，第二个是发生错误的组件实例对象，第三个是发生错误的触发信息</li><li>该函数如果写return false则阻止错误继续向上传递</li></ul><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><ul><li>什么是插槽？<br>vue为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽</li><li>更高级的组件复用方式。接收dom片段或内容，加工处理后返回显示<h2 id="Vue插槽的作用"><a href="#Vue插槽的作用" class="headerlink" title="Vue插槽的作用"></a>Vue插槽的作用</h2><h3 id="vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置"><a href="#vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置" class="headerlink" title="vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置"></a>vue插槽是vue中常见的一种组件间的相互通信方式，作用是子组件中某个位置插入父组件的自定义html结构和data数据，在要接收数据的组件页面通过<slot></slot>标签来表示。简单来说，就是通过此标签来起到占位的作用，而要插入的内容也会对应到标签所在的位置</h3></li></ul><h2 id="三种插槽的定义"><a href="#三种插槽的定义" class="headerlink" title="三种插槽的定义"></a>三种插槽的定义</h2><h3 id="默认插槽（匿名插槽）"><a href="#默认插槽（匿名插槽）" class="headerlink" title="默认插槽（匿名插槽）"></a>默认插槽（匿名插槽）</h3><ul><li>定义：默认插槽是将父组件的结构和数据插入子组件中，默认插槽只有一个插入位置，要插入的html结构和data数据必须在父组件中，不过css可以在子组件中</li><li>特点： 父组件决定结构和数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件</span><br>    &lt;template&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span> </span><br><span class="language-xml">            &#123;/* Child为子组件标签 </span><br><span class="language-xml">            插槽内容，可以是template标签也可以是其他标签,比如<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;图片地址&quot;</span> /&gt;</span>  */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>要插入的html内容<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br>    &lt;/template&gt;<br><span class="hljs-comment">// 子组件</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            &#123;/* 插槽位置</span><br><span class="language-xml">            插槽通俗的说就是：挖个坑，等组件的使用者进行填充 */&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>这里可以写默认值，当使用者没有传递具体结构时，会显示此内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><ul><li>定义：简单地说就是具有名字的插槽，只是默认插槽只有一个插入位置，具名插槽可以有多个插入位置，根据名字来识别对应的插槽</li><li>特点： 父组件决定结构和数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件</span><br>&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span> </span><br><span class="language-xml">        &#123;/* Child为子组件标签</span><br><span class="language-xml">        插槽内容 */&#125;</span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:one</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">testchart</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">testchart</span>&gt;</span></span><br><span class="language-xml">        //这是为了验证，子组件中的插槽可以填充任何结构的内容，所以在one插槽中插入一个组件</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:two</span>&gt;</span></span><br><span class="language-xml">            我是要给two插槽的信息</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">components</span>:&#123;<br>        testchart,<br>        child<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 子组件</span><br>&lt;div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><ul><li>定义：作用域插槽的data数据固定写在子组件中，数据的html结构根据父组件传入的html结构来决定</li><li>简述： 根据父组件中不同的html结构解析data中的数据</li><li>特点： 子组件决定数据，父组件决定结构</li><li>父组件中的插槽模版template里，其作用域属于插槽组件<br>&lt;slot :自定义name=data中的属性或者对象&gt;</slot></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// 父组件</span><br>  &lt;template&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span>  </span><br><span class="language-xml">          &#123;/* Child为子组件标签 </span><br><span class="language-xml">          插槽内容，作用域插槽必须要写template   */&#125;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;m in data.msg&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;m&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;m in data.msg&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;m&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;m in data.msg&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;m&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br>  &lt;/template&gt;<br><br>  <span class="hljs-comment">// 子组件</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">&#123;/* 插槽位置 </span><br><span class="language-xml">插槽的结构是由使用者决定的 */&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>插槽未被调用时会显示此内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Child&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// 公用数据</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-attr">msg</span>: [<span class="hljs-string">&quot;火锅&quot;</span>, <span class="hljs-string">&quot;红烧肉&quot;</span>, <span class="hljs-string">&quot;烤羊腿&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><ul><li>父传子：父组件使用v-bind 向插槽组件传参</li><li>子传父：插槽组件在slot组件上使用v-bind 反向传参<br>父组件使用<code>v-slot=&#39;参数&#39;</code> 接收数据<br>[AIA]一句话概括就是v-slot:后边是插槽名称，=后边是组件内部绑定作用域值的映射</li></ul><h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><ul><li>凡是以<code>.vue</code>做文件后缀的都是组件<h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2></li><li>作用域只限于当前使用该组件的环境中生效<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.vue</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Com</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Com.vue&quot;</span><br><span class="hljs-attr">components</span>:&#123;<br>    <span class="hljs-title class_">Com</span><br>&#125;<br>&lt;<span class="hljs-title class_">Com</span>&gt;&lt;/<span class="hljs-title class_">Com</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><ul><li>该组件生效环境为整个项目，任何组件内使用都可以直接使用该组件，且不用单独导入<h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MySon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./MySon.vue&quot;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;my-son&quot;</span>,<span class="hljs-title class_">MySon</span>);<br><span class="hljs-comment">// 每次只能挂载一个</span><br><br></code></pre></td></tr></table></figure><h2 id="全局组件局部组件对比"><a href="#全局组件局部组件对比" class="headerlink" title="全局组件局部组件对比"></a>全局组件局部组件对比</h2><ol><li>全局组件在使用上比局部组件更简单，更快，更省代码</li><li>全局组件可能会污染全局环境，比如命名重复，被替换覆盖等问题，并且造成代码冗余，后期维护不方便</li><li>所以要合理的使用全局组件，当一个组件被重复使用3次及以上则考虑全局组件<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2></li></ol><ul><li>定义：两个组件及以上进行数据交互，叫做组件通信</li><li>分为两类</li></ul><ol><li>父子之间通信</li><li>非父子之间的通信<h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3></li></ol><ul><li>父组件使用 v-bind 给子组件绑定属性</li><li>子组件使用 <code>$emit</code>接收父组件给的属性<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3></li><li>父组件使用 v-on 给子组件绑定自定义事件函数</li><li>子组件使用 <code>$emit</code>调用父组件传递的函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;articleList&quot;</span> @<span class="hljs-attr">changeMsg</span>=<span class="hljs-string">&quot;changeMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child.vue&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;巧克力&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">changeMsg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = msg</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 这里两个大括号中间放msg --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>改变字符串<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">props</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;changeMsg&#x27;</span>,<span class="hljs-string">&#x27;蛋挞&#x27;</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟"></a>兄弟</h3><ul><li>使用父组件作为媒介，父组件充当中转站<h3 id="parent和-children-不可控不推荐"><a href="#parent和-children-不可控不推荐" class="headerlink" title="$parent和$children(不可控不推荐)"></a>$parent和$children(不可控不推荐)</h3></li><li>通过$parent和$children可以访问组件实例，拿到实例代表什么？代表可以访问此组件的所有方法和data</li><li>parent 获取直接父组件实例对象</li><li>children 获取所有渲染的(必须要渲染在template里才能获取到)子组件集合</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 这里两个大括号中间放msg --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;Welcome&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">changeA</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 获取到子组件A</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">messageA</span> = <span class="hljs-string">&#x27;this is a new value&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>两个大括号中间写messageA<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>获取父组件的值为:两个大括号中间写parentVal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">messageA</span>:<span class="hljs-string">&#x27;this is old&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">parentVal</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">msg</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>[!注意]：注意边界，如果在#app上拿$parent得到的是new Vue()的实例，在这实例上再拿$parent得到的是undefined，而在最底层的子组件拿$children是个空数组。也要注意得到parent和parent和parent和children的值不一样，$children 的值是数组，而$parent是个对象。<br>$children获取到的实例不保证顺序，因此当有多个子组件时可能获取到的不是自己想要的那一个。当组件嵌套多级时，可能会出现$parent.$parent.$parent…的情况，对于后续维护不友好。</p><ul><li>props $emit 、 $parent $children两种方式用于父子组件之间的通信， 而使用props进行父子组件通信更加普遍，二者皆不能用于非父子组件之间的通信。</li></ul><h3 id="跨层级"><a href="#跨层级" class="headerlink" title="跨层级"></a>跨层级</h3><h4 id="attrs-跨层级传递数据"><a href="#attrs-跨层级传递数据" class="headerlink" title="$attrs 跨层级传递数据"></a><code>$attrs</code> 跨层级传递数据</h4><ul><li>通过v-bind=”$attrs”传入内部组件——在创建高级别的组件时非常有用</li><li>$attrs可以收集父组件中的所有传过来的属性除了那些在组件中没有通过props定义的。不包括样式class 和 style。<br>【Tip】什么时候用它以及为什么用它？<br>我们如果使用props的话，最里面的组件想要获取最外层组件的数据，就要通过中间的组件的props来传递，但是这个props对于中间的这个组件没啥用处，它就是做了一个桥梁而已。所以就有了这个$attrs来帮助我们，不必在中间组件中写props就可以让最里面的组件拿到最外面组件传进来的数据。</li><li>具体使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//grandfather</span><br>    <span class="hljs-keyword">import</span> father <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./father&#x27;</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>        <span class="hljs-attr">components</span>: &#123;<br>            father<br>        &#125;,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- father --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: red&quot;</span>&gt;</span><br>    child in father<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>father age:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 两个大括号包着fatherAge --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">child</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> child <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        child</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">fatherAge</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- child --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>time: <br>        <span class="hljs-comment">&lt;!-- 双括号中包着childTime --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">childTime</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="listeners跨层级传递事件"><a href="#listeners跨层级传递事件" class="headerlink" title="$listeners跨层级传递事件"></a><code>$listeners</code>跨层级传递事件</h4><p>vue1.0以前，没有vuex，想全局管理共享的数据，需要使用“黑魔法”，单独的new一个vue实例对象，基于该对象做数据通信</p><ul><li>通过v-on=”$listeners”传入内部组件时非常有用</li><li>它是一个对象，里面包含了作用在这个组件上的所有监听器</li><li>适用场景<br>用.native修饰符可以把”focus”这个原生事件绑定在这个组件上。如果组件的根元素不能使用focus事件时，这个绑定会失效。<br>比如:input 所以为了在input元素上绑定”focus”这个事件，必须在input上用v-on绑定原生事件<input v-on:input="$emit('input',$event.target.value)"/></li></ul><h3 id="inheritAttr"><a href="#inheritAttr" class="headerlink" title="inheritAttr"></a>inheritAttr</h3><p>默认情况下被父作用域的不被认作props的特性绑定，将会“回退”且作为普通的HTML特性应用在子组件的根元素上</p><ul><li>当设置inheritAttrs: true（默认）时，子组件的顶层标签元素中会渲染出父组件传递过来的属性</li><li>不管inheritAttrs为true或者false，子组件中都能通过$attrs属性获取到父组件中传递过来的属性。 </li></ul><h3 id="bus中央事件总线"><a href="#bus中央事件总线" class="headerlink" title="bus中央事件总线"></a>bus中央事件总线</h3><h4 id="on和-event"><a href="#on和-event" class="headerlink" title="$on和$event"></a><code>$on</code>和<code>$event</code></h4><ul><li>$on是事件派发</li><li>$event事件监听</li><li>bus无论是嵌套还是兄弟，他们都可以互相通信<br>  A -&gt; A1<br>  B和A1通信<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5></li></ul><ol><li>全局定义bus:新建src/eventBus.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">EventBus</span>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br></code></pre></td></tr></table></figure></li><li>在组件中引入bus的引用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> eventBus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./bus/eventBus&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$eventBus</span> = eventBus<br></code></pre></td></tr></table></figure></li><li>通过$emit触发事件传值，在另一个组件中的mounted中用on监听事件从而获取值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 组件1</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Event</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<span class="hljs-comment">// 准备一个空的实例对象，相当于又new了一个vue实例，Event中含有vue的全部办法</span><br><span class="hljs-title class_">Event</span>.$emit(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>);<span class="hljs-comment">// 发送数据，触发当前实例上的事件，要传递的数据会传递给监听器。第一个参数是发送数据名称，接收时还用这个名字接收，第二个参数是这个数据现在的位置</span><br><br><span class="hljs-comment">// 组件2</span><br><span class="hljs-attr">mounted</span>:&#123;<br>    <span class="hljs-title class_">Event</span>.$on(<span class="hljs-string">&#x27;msg&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>)&#123;<span class="hljs-comment">// 接收数据，第一个参数是数据的名字，与发送时的名字对应，第二个参数是一个方法，要对数据进行操作</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>[AIA]</p><ol><li>vue原型挂载总线<br>Vue.prototype.bus = new Vue()</li><li>子组件发送数据<br>this.bus.$emit(“change”,data)</li><li>子组件接收数据<br>this.bus.$on(“change”,function(data){})</li></ol><h3 id="ref-refs"><a href="#ref-refs" class="headerlink" title="ref/$refs"></a>ref/$refs</h3><ul><li>ref:如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据，被用来给元素或子组件注册信息，引用信息将会注册在父组件的 $refs 对象上。</li><li>适用场景：当使用element-ui组件时，可用于调用组件方法，例如el-table组件的选择表格项，排序等等。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;vue.js&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-attr">sayHello</span>:() &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 父组件 app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;comA&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> comA = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$ref</span>.<span class="hljs-property">comA</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(comA.<span class="hljs-property">name</span>);<span class="hljs-comment">//vue.js</span></span><br><span class="language-javascript">            comA.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">//hello</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>ref 这种方式，就是获取子组件的实例，然后可以直接子组件的方法和访问操作data的数据，就是父组件控制子组件的一种方式，子组件想向父组件传参或操作，只能通过其他的方式了</p><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h3><ul><li>官方描述：选项需一起使用，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效</li><li>父组件中通过provide来提供变量，然后在子组件中通过inject来注入变量<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4>provide</li><li>一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。<br>inject</li><li>一个字符串数组</li><li>一个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//祖先组件 提供foo</span><br><span class="hljs-comment">// 第一种</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;father&quot;</span>,<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">foo</span>:<span class="hljs-string">&#x27;hello&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 第二种</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;father&quot;</span>,<br>    <span class="hljs-attr">provide</span>:&#123;<br>        <span class="hljs-attr">foo</span>:<span class="hljs-string">&#x27;hello~&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 后代组件注入foo,直接当作this.foo来用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">inject</span>:[<span class="hljs-string">&#x27;foo&#x27;</span>]<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    第一二种区别在哪儿？</span><br><span class="hljs-comment">        如果需要this对象属性的值，</span><br><span class="hljs-comment">        例如：</span><br><span class="hljs-comment">            provide() &#123;</span><br><span class="hljs-comment">                return &#123;</span><br><span class="hljs-comment">                    test:this.msg</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        那么第二种是传不了的，后代组件拿不到数据。所以建议只写第一种</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>[注意]一旦注入了某个数据，比如上面示例中的 foo，那这个组件中就不能再声明 foo 这个数据了，因为它已经被父级占有。</p><h3 id="provide-和-inject-绑定并不是可响应的"><a href="#provide-和-inject-绑定并不是可响应的" class="headerlink" title="provide 和 inject 绑定并不是可响应的"></a>provide 和 inject 绑定并不是可响应的</h3><p>这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。因为对象是引用类型。</p><ul><li>先来个值类型的数据（也就是字符串）例子，不会响应</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">test</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;Welcome to Your Vue.js App&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = <span class="hljs-string">&quot;hello world&quot;</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_provided</span>.<span class="hljs-property">msg</span>) <span class="hljs-comment">//Welcome to Your Vue.js App</span><br>        &#125;,<span class="hljs-number">3000</span>)<br>    &#125;<br><br><span class="hljs-comment">// 这样做是不行的，打印出来的 _provided 中的数据并没有改，子组件取得值也没变。若直接给 this._provided.msg 赋值，但是即使是_provided.msg 里面的值改变了，子组件的取值，依然没有变。</span><br></code></pre></td></tr></table></figure><ul><li>但参数如果是对象，就可以响应了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">test</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span><br>    &#125;<br>&#125;,<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">activeData</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xxxx&#x27;</span>&#125;<br>    &#125;<br>&#125;,<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">activeData</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;aaaa&#x27;</span><br>    &#125;,<span class="hljs-number">3000</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="用project与inject实现全局变量"><a href="#用project与inject实现全局变量" class="headerlink" title="用project与inject实现全局变量"></a>用project与inject实现全局变量</h4><ul><li>将其绑定到最顶层的组件app.vue，所有后代都接收到了，就是当做全局变量来用了。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// app.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">app</span>:<span class="hljs-variable language_">this</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">text</span>:<span class="hljs-string">&quot;weiweiwei&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;enenen&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 其他所有子组件，需要全局变量的，只需按需注入app即可</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">inject</span>:[<span class="hljs-string">&#x27;foo&#x27;</span>,<span class="hljs-string">&#x27;app&#x27;</span>],<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-property">text</span>);<span class="hljs-comment">// 获取app中的变量</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-title function_">say</span>();<span class="hljs-comment">// 可以执行app中的方法，变身为全局方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="provide-inject实现页面刷新，不闪烁"><a href="#provide-inject实现页面刷新，不闪烁" class="headerlink" title="provide/inject实现页面刷新，不闪烁"></a>provide/inject实现页面刷新，不闪烁</h4><ol><li>用vue-router重新路由到当前页面，页面是不进行刷新的</li><li>采用window.reload()，或者router.go(0)刷新时，整个浏览器进行了重新加载，闪烁，体验不好<br>上述办法都太行，那怎么办？</li></ol><ul><li>控制路由的组件中写一个函数（使用v-if控制router-view的显示隐藏），然后把这个函数传递给后代，然后在后代组件中调用这个方法即可刷新路由啦。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- app.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShowRouter&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">provide</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">reload</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">reload</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isShowRouter</span>:<span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">reload</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShowRouter</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShowRouter</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 后代组件</span></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">inject</span>:[<span class="hljs-string">&#x27;reload&#x27;</span>]</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//这里 provide 使用了函数传递给后代，然后后代调用这个函数，这种思路，也是可以做子后代向父组件传参通讯的思路了。这里的原理，和 event 事件订阅发布就很像了</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><ul><li>定义：除了原生标签是纯小写以外，非自定义组件纯小写标签都是内置组件<h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3>vue内置模板组件，它不会渲染成任何真实的dom<h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3>插槽组件，它也不会渲染成任何真实的dom,只是用于接收渲染插入的内容<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3>缓存状态组件，不会渲染成真实dom，只是将被包裹的自定义组件的状态缓存到内存中</li><li>多用与缓存表单填写的组件</li><li>它不能缓存v-for循环渲染出来的组件</li><li>如果它包含多个子元素的话，需要使用v-if控制显示一个子元素【props】</li><li>include 该属性控制keep-alive只缓存被指定的组件，不被指定的不缓存</li><li>exclude 该属性控制keep-alive不缓存被指定的组件，不被指定的组件缓存</li><li>max 数字，限制keep-alive缓存组件的最大个数<br>【生命周期】<br>被keep-alive包裹的组件，才拥有该生命周期</li><li>activated被keep-alive激活的生命周期</li><li>deactivated被keep-alive销毁时候的生命周期<h4 id="keep-alive使用"><a href="#keep-alive使用" class="headerlink" title="keep-alive使用"></a>keep-alive使用</h4></li></ul><ol><li><p>几种常见用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;test-keep-alive&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">includedComponents</span>:<span class="hljs-string">&quot;test-keep-alive&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第一种 将缓存name为test-keep-alive的组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;test-keep-alive&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第二种 将缓存name为a或b的组件，结合动态组件使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;a,b&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第三种 使用正则表达式，需使用v-bind --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&quot;/a|b/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第四种 动态判断 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">:include</span>=<span class="hljs-string">&quot;includeComponents&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第五种 将不缓存name为test-keep-alive的组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">&quot;test-keep-alive&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>结合router，缓存部分页面<br>[使用$route.meta的keepAlive属性]</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// router/index.js</span></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">routes</span>:[</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Hello&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>:<span class="hljs-title class_">Hello</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">meta</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">keepAlive</span>:<span class="hljs-literal">false</span> <span class="hljs-comment">// 不需要缓存</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/page1&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Page1&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">component</span>:<span class="hljs-title class_">Page1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">meta</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">keepAlive</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 需要被缓存</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- page1页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>两个大括号包着msg<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入框&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- hello页面 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>两个大括号包着msg<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    结果：在page1页面输入框输入sss,然后手动跳转到hello页面，回到page1页面之前输入的sss依然保留，说明页面信息成功保存在内存中</span><br><span class="hljs-comment"> --&gt;</span><br></code></pre></td></tr></table></figure><p>或者也可以通过动态设置route.meta的keepAlive属性来实现其他需求<br>【要求】：首页是A页面 B页面跳转到A，A页面需要缓存，C页面跳转到A，A页面不需要被缓存<br> [思路]：思路是在每个路由的beforeRouteLeave(to, from, next)钩子中设置to.meta.keepAlive：</p><ul><li>to:Route 即将要进入目标路由对象</li><li>from:Route 当前导航正要离开的路由</li><li>next：Function 一定要调用该方法来resolve这个钩子。执行效果依赖 next 方法的调用参数<ul><li>next() 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed(确认的)</li><li>next(false) 中断当前的导航。如果浏览器的URL改变了(可能是用户手动或者浏览器后退按钮)，那么URL地址会重置到from路由对应的地址</li><li>next(‘/‘) 或者next({path:’/‘}):跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航</li><li>next(error) 如果传入next的参数是一个error实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// A的路由</span><br>&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br>    <span class="hljs-attr">component</span>:A,<br>    <span class="hljs-attr">meta</span>:&#123;<br>        <span class="hljs-attr">keepAlive</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 需要缓存</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) &#123;<br>        <span class="hljs-comment">// 设置下一个路由的meta</span><br>        to.<span class="hljs-property">meta</span>.<span class="hljs-property">keepAlive</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">//B跳转到A时，让A缓存，即不刷新</span><br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) &#123;<br>        <span class="hljs-comment">// 设置下一个路由的meta</span><br>        to.<span class="hljs-property">meta</span>.<span class="hljs-property">keepAlive</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// C 跳转到 A 时让A不缓存，即刷新</span><br>        <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="component动态加载组件"><a href="#component动态加载组件" class="headerlink" title="component动态加载组件"></a>component动态加载组件</h3><ul><li>特点<ol><li>必须使用动态绑定的is属性来加载组件</li><li>is属性值必须是components里注册组件的名字</li><li>让代码更简洁，更可控</li><li>它的工作形式和v-if一致，使组件加载与销毁</li></ol></li><li>实现两个子组件动态切换<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- son1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是子组件1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>子组件1的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- son2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是子组件2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>子组件2的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 父组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change1&quot;</span>&gt;</span>son1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change2&quot;</span>&gt;</span>son2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&#x27;state&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">state</span>:<span class="hljs-string">&#x27;son1&#x27;</span>&#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">change1</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-string">&#x27;son1&#x27;</span>&#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">change2</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>=<span class="hljs-string">&#x27;son2&#x27;</span>&#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">components</span>:&#123;</span><br><span class="language-javascript">        son1,son2</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>【Tip】</p><ol><li>son1,son2切换时，另一组件被销毁，所以，当两个组件进行动态切换时，组件的状态是：不断创建与销毁的过程</li><li>如果想把组件缓存下来，可以在动态组件上使用vue另一个内置组件keep-alive <keep-alive>     <component :is="state"></component> </keep-alive>#### 父子组件执行顺序的问题：</li></ol><ul><li>问：我们在父组件和子组件son中分别定义个生命周期钩子mounted，页面加载到完成，父组件先渲染完成还是子组件先渲染完成呢？</li><li>答：结果是父组件挂载完成前提：需等到子组件挂载完成后</li><li>问：子组件先挂载完成，父组件才能挂载完成，下边代码我们在父组件中获取子组件的dom元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">son</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;son&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 子组件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> son = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>:</span><br><span class="language-javascript">        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>双括号里包着name<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-javascript">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-javascript">        ,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hhh&#x27;</span>&#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;lll&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 父组件(根实例)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">son</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerText</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>:&#123;son&#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 上边代码，在子组件的mounted中我们修改了原来data对象中的数据，页面渲染完全没问题，但是在父组件mouted中输出子组件dom元素的内容时，不是新数据 &quot;lll&quot;，而是原来的数据 &quot;hhh&quot;  --&gt;</span><br></code></pre></td></tr></table></figure><p>【结论】子组件生命周期钩子mounted和父组件的mounted都是同步执行的，但是子组件渲染却是异步渲染的，所以在父组件的mounted中获取dom元素是原来的子组件数据！！<br>[解决上述bug] 用vm.$nextTick中去获取dom元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件</span><br>    .......<br><span class="hljs-comment">// 父组件(根实例)</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">son</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">innerText</span>)<br>        &#125;)<br>    &#125;,<br>    <span class="hljs-attr">components</span>:&#123;son&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="BTW——el和-el"><a href="#BTW——el和-el" class="headerlink" title="BTW——el和$el"></a>BTW——el和$el</h3><ul><li>el是Vue实例的挂载目标，实例挂载后，元素可以用xx.$el访问。挂载阶段还没开始的时候,$el属性是不可见的。vue生命周期mounted阶段，el被新创建的xx.$el替换，这个时候Vue实例的挂载目标确定，DOM渲染完毕</li></ul><h3 id="transition动画组件"><a href="#transition动画组件" class="headerlink" title="transition动画组件"></a>transition动画组件</h3><h4 id="组件出现过度-动画效果的原因"><a href="#组件出现过度-动画效果的原因" class="headerlink" title="组件出现过度/动画效果的原因"></a>组件出现过度/动画效果的原因</h4><p>【当插入或删除包含在transition组件中的元素时，Vue将会做以下处理】：</p><ol><li>自动嗅探目标元素是否应用里css过度或动画，如果是，在恰当的时机添加/删除css类名</li><li>如果过度组件提供了JS钩子函数，这些钩子函数将在恰当时机被调用</li><li>如果没有找到JS钩子函数也没有检测到css过渡/动画，DOM操作(插入/删除)在下一帧中立即执行。(注意：此浏览器逐帧动画机制，和Vue的nextTick概念不同)<h4 id="transition组件在什么情况下可以生成动画效果？"><a href="#transition组件在什么情况下可以生成动画效果？" class="headerlink" title="transition组件在什么情况下可以生成动画效果？"></a>transition组件在什么情况下可以生成动画效果？</h4>【Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡动画效果】</li><li>条件渲染(使用v-if)，可以使用key代替v-if</li><li>条件展示(使用v-show)</li><li>动态组件<br> <component :is='currentTabComponent'></component></li><li>组件根节点<br> transition/transition-group作为跟组件，形成可服用动态组件<h4 id="transition组件生成动画效果的方式"><a href="#transition组件生成动画效果的方式" class="headerlink" title="transition组件生成动画效果的方式"></a>transition组件生成动画效果的方式</h4>【Vue在插入、更新或者移除DOM 时，提供了以下不同方式的应用过渡效果】：</li><li>在css过渡和动画中自动应用class</li><li>可以配合使用第三方css动画库，如animate.css</li><li>在过渡钩子函数中使用javascript 直接操作 dom</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js<h4 id="分别详细介绍"><a href="#分别详细介绍" class="headerlink" title="分别详细介绍"></a>分别详细介绍</h4></li><li>【css过渡】：常用的过渡都是使用 CSS 过渡，也就是 组件和css3属性transition连用<h5 id="api"><a href="#api" class="headerlink" title="api"></a>api</h5></li></ol><ul><li>name 指定自己写的动画类名前缀</li><li>v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li><li>enter-class-active 进入动画的类名</li><li>leave-class-active 离开动画的类名</li><li>duration 设置动画执行的间隔时间</li><li>v-enter-active: 定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。</li><li>v-enter-to: 定义进入过渡的结束状态。在元素被插入一帧后生效（于此同时 v-enter 被删除），在 transition/animation 完成之后移除。</li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li><li>v-leave-active: 定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。 这个类可以被用来定义过渡的过程时间，延迟和曲线函数。</li><li>v-leave-to: 定义离开过渡的结束状态。在离开过渡被触发一帧后生效（于此同时 v-leave 被删除），在transition/animation 完成之后移除。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app4&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = !show&quot;</span>&gt;</span><br>        toggle coustom class<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bounce&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animated tada&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animated bounceOutRight&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>自定义过渡类名<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 样式如此设置，只需要控制show是false还是true，即可有淡入淡出效果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.fade-enter-active</span>,<span class="hljs-selector-class">.fade-leave-active</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.5s</span>;       </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.fade-enter</span>,<span class="hljs-selector-class">.fade-leave-to</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 对于这些enter/leave过渡中切换的类名，v-是这些类名的前缀。使用使用&lt;transition name=&quot;my-transition&quot; 可以重置前缀，比如 v-enter 替换为 my-transition-enter。 --&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>【过渡可以和其他第三方 CSS 动画库连用】</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;transition <br>    name=<span class="hljs-string">&quot;bounce&quot;</span><br>    enter-active-<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;animated tada&quot;</span><br>    leave-active-<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;animated bounceOutRight&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>自定义过渡类名<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/transition&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span><br>    &#125;<br>&#125; <br><span class="hljs-comment">// 不需要设置样式，只需要控制show是false还是true，即可有动画效果</span><br></code></pre></td></tr></table></figure><ol start="3"><li>【CSS 动画】</li></ol><ul><li>CSS 动画是transition组件和css3属性animation连用，用法和 CSS 过渡相同</li><li>区别是：在动画中 v-enter 类名在节点插入DOM后不会立即删除，而是在 animationend 事件触发时删除。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bounce&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>使用animation做动画效果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-class">.bounce-enter-active</span>&#123;<span class="hljs-attribute">animation</span>:bounce-in <span class="hljs-number">0.5s</span>&#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.bounce-leave-active</span>&#123;<span class="hljs-attribute">animation</span>:bounce-in <span class="hljs-number">0.5s</span> reverse&#125;</span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> bounce-in&#123;</span><br><span class="language-css">        <span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scale</span>(<span class="hljs-number">0</span>)&#125;</span><br><span class="language-css">        <span class="hljs-number">50%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scale</span>(<span class="hljs-number">1.5</span>)&#125;</span><br><span class="language-css">        <span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>)&#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>【transition组件和JavaScript 钩子连用】</li></ol><ul><li>当只用js过渡的时候，在enter和leave中必须使用done进行回调。否则，它们将被同步调用，过渡会立即完成</li><li>推荐对于仅使用JS过渡的元素v-bind:css=”false”,Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">before-enter</span>=<span class="hljs-string">&quot;beforeEnter&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">enter</span>=<span class="hljs-string">&quot;enter&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">after-enter</span>=<span class="hljs-string">&quot;afterEnter&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-on:before-leave</span>=<span class="hljs-string">&quot;beforeLeave&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-on:leave</span>=<span class="hljs-string">&quot;leave&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-on:after-leave</span>=<span class="hljs-string">&quot;afterLeave&quot;</span></span><br><span class="hljs-tag"> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ball&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//el 即操作的元素对象</span></span><br><span class="language-javascript">    <span class="hljs-title function_">beforeEnter</span>(<span class="hljs-params">el</span>)&#123;</span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">&#x27;translate(80px,80px)&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">enter</span>(<span class="hljs-params">el,done</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 必须下面加下面一行，否则不会出现应有的效果</span></span><br><span class="language-javascript">        el.<span class="hljs-property">offsetWidth</span>;<span class="hljs-comment">//这里可以理解成强制浏览器刷新，也可以写成el.offsetHeight</span></span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transition</span>=<span class="hljs-string">&#x27;all 1.5s ease&#x27;</span></span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">&#x27;translate(0,0)&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-title function_">done</span>()</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">afterEnter</span>(<span class="hljs-params">el</span>)&#123;</span><br><span class="language-javascript">        cnosole.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterEnter&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// this.flag=false;//隐藏小球</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">beforeLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>)&#123;</span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">&#x27;translate(0,0)&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 当与CSS结合时</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 回调函数done是可选的</span></span><br><span class="language-javascript">    <span class="hljs-attr">leave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">el,done</span>)&#123;</span><br><span class="language-javascript">        el.<span class="hljs-property">offsetWidth</span>;<span class="hljs-comment">//这里可以理解成强制浏览器刷新，也可以写el.offsetHeight</span></span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transition</span>=<span class="hljs-string">&#x27;all 3s ease&#x27;</span></span><br><span class="language-javascript">        el.<span class="hljs-property">style</span>.<span class="hljs-property">transform</span>=<span class="hljs-string">&#x27;translate(80px 80px)&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 这是直接调用done的话由于会立即删除元素导致动画不执行</span></span><br><span class="language-javascript">        <span class="hljs-title function_">done</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 解决办法</span></span><br><span class="language-javascript">        方法<span class="hljs-number">1</span>：不调用done可以进行动画，但是元素依旧存在，并且afterLeave函数钩子不执行</span><br><span class="language-javascript">        方法<span class="hljs-number">2</span>：</span><br><span class="language-javascript">        <span class="hljs-comment">//setTimeout可以解决这个问题，让done不立即执行，过几秒后再执行setTimeout(done,3000);//时间根据自己设定的动画时间确定</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">afterLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;afterLeave&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>[注意]：在leave函数钩子中，直接调用done函数，会立即删除元素导致动画不执行</p><ul><li>和JS动画库Velocity一起使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// &lt;div id=&quot;app5&quot;&gt;</span><br><span class="hljs-comment">//     &lt;button @click=&quot;show = !show&quot;&gt;toggle hook&lt;/button&gt;</span><br><span class="hljs-comment">//     &lt;transition @before-enter=&quot;beforeEnter&quot;</span><br><span class="hljs-comment">//                 @enter=&quot;enter&quot;</span><br><span class="hljs-comment">//                 @leave=&quot;leave&quot;</span><br><span class="hljs-comment">//                 :css=&quot;false&quot;&gt;</span><br><span class="hljs-comment">//             &lt;p v-if=&quot;show&quot;&gt;javascript 钩子使用&lt;/p&gt;</span><br><span class="hljs-comment">//     &lt;/transition&gt;</span><br><span class="hljs-comment">// &lt;/div&gt;</span><br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-attr">beforeEnter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(el);<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;beforeEnter&quot;</span>);<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = <span class="hljs-number">0</span><br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">transformOrigin</span> = <span class="hljs-string">&#x27;left&#x27;</span><br>        &#125;,<br>        <span class="hljs-attr">enter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">el, done</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;enter&quot;</span>);<br>        <span class="hljs-comment">//    console.log(done);</span><br>            <span class="hljs-title class_">Velocity</span>(el, &#123;<span class="hljs-attr">opacity</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">fontSize</span>:<span class="hljs-string">&#x27;1.4em&#x27;</span>&#125;, &#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">300</span>&#125;);<br>            <span class="hljs-title class_">Velocity</span>(el, &#123;<span class="hljs-attr">fontSize</span>:<span class="hljs-string">&#x27;1em&#x27;</span>&#125;, &#123;<span class="hljs-attr">complete</span>:done&#125;);<br>            <span class="hljs-title class_">Velocity</span>(el,<span class="hljs-string">&quot;reverse&quot;</span>, &#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">6000</span> &#125;);<br>            <span class="hljs-title class_">Velocity</span>(el,&#123;<br>                        <span class="hljs-attr">borderBottomWidth</span>: [ <span class="hljs-string">&quot;2px&quot;</span>, <span class="hljs-string">&quot;spring&quot;</span> ], <span class="hljs-comment">// Uses &quot;spring&quot;</span><br>                    <span class="hljs-attr">width</span>: [ <span class="hljs-string">&quot;100px&quot;</span>, [ <span class="hljs-number">250</span>, <span class="hljs-number">15</span> ] ], <span class="hljs-comment">// Uses custom spring physics</span><br>                        <span class="hljs-attr">height</span>: <span class="hljs-string">&quot;100px&quot;</span> <span class="hljs-comment">// Defaults to easeInSine, the call&#x27;s default easing</span><br>                    &#125;, &#123;<br>                            <span class="hljs-attr">easing</span>: <span class="hljs-string">&quot;easeInSine&quot;</span> <span class="hljs-comment">// Default easing</span><br>                    &#125;);<br>        &#125;,<br>        <span class="hljs-attr">leave</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">el, done</span>) &#123;<br>            <span class="hljs-title class_">Velocity</span>(el, &#123;<span class="hljs-attr">translateX</span>:<span class="hljs-string">&#x27;15px&#x27;</span>, <span class="hljs-attr">rotateZ</span>:<span class="hljs-string">&#x27;50deg&#x27;</span>&#125;, &#123;<span class="hljs-attr">duration</span>:<span class="hljs-number">600</span>&#125;)<br>            <span class="hljs-title class_">Velocity</span>(el, &#123;<span class="hljs-attr">rotateZ</span>:<span class="hljs-string">&#x27;100deg&#x27;</span>&#125;, &#123;<span class="hljs-attr">loop</span>:<span class="hljs-number">2</span>&#125;)<br>            <span class="hljs-title class_">Velocity</span>(el,&#123;<br>                <span class="hljs-attr">rotateZ</span>:<span class="hljs-string">&#x27;45deg&#x27;</span>,<br>                <span class="hljs-attr">translateY</span>:<span class="hljs-string">&#x27;30px&#x27;</span>,<br>                <span class="hljs-attr">translateX</span>:<span class="hljs-string">&#x27;30px&#x27;</span>,<br>                <span class="hljs-attr">opacity</span>:<span class="hljs-number">0</span><br>            &#125;, &#123;<span class="hljs-attr">complete</span>:done&#125;)<br>        &#125;   <br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>【组件间切换的动态效果实现】<br>组件的过渡-不需要使用key attribute。使用动态组件component，进行切换</li><li>【元素间切换的动态效果实现】</li></ol><ul><li>6.1原生标签可以使用 v-if/v-else<transition>    <button v-if="isEdting" key="save">      Save    </button>    <button v-else key="edit">      Edit    </button>  </transition></li></ul><p>[注意]：当有相同标签名的元素切换时(比如两个div元素)，必须通过 key attribute 设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容（也就是不会有动画效果）。</p><ul><li><p>6.2设置key代替v-if/v-else</p>  <transition>    <button v-bind:key="isEdting">    双括号中间包着isEdting ? 'Save':'Edit'    </button>  </transition></li><li><p>6.3两种过渡模式<br>多个元素间的过度动画（一个元素离开，一个元素进入），是同时生效的。这种情形不能满足所有要求，所以 Vue 提供了过渡模式。</p><ol><li>in-out：新元素先进行过渡，完成之后当前元素过渡离开。</li><li>out-in：当前元素先进行过渡，完成之后新元素过渡进入<transition name="fade" mode="out-in">  <!-- ... the buttons ...--></transition></li></ol></li></ul><ol start="7"><li>【可复用过渡组件】<br>过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将  或者  作为根组件，然后将任何子组件放置在其中就可以了。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-special-transition&#x27;</span>, &#123;<br>        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;\ name=&quot;very-special-transition&quot;\</span><br><span class="hljs-string">        mode=&quot;out-in&quot;\</span><br><span class="hljs-string">        v-on:before-enter=&quot;beforeEnter&quot;\</span><br><span class="hljs-string">        v-on:after-enter=&quot;afterEnter&quot;\</span><br><span class="hljs-string">    &gt;\\</span><br><span class="hljs-string">\</span><br><span class="hljs-string">&#x27;</span>,<br><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-attr">beforeEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<span class="hljs-comment">// ...</span><br>                        &#125;,<br><span class="hljs-attr">afterEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<span class="hljs-comment">// ...</span><br>                        &#125;<br>    &#125;<br>&#125;)<br><br>函数组件更适合完成这个任务：<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-special-transition&#x27;</span>, &#123;<br><span class="hljs-attr">functional</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">render</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">createElement, context</span>) &#123;<span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;very-special-transition&#x27;</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;out-in&#x27;</span><br>&#125;,<br><span class="hljs-attr">on</span>: &#123;<br><span class="hljs-attr">beforeEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<span class="hljs-comment">// ...</span><br>                            &#125;,<br><span class="hljs-attr">afterEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<span class="hljs-comment">// ...</span><br>                            &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;transition&#x27;</span>, data, context.<span class="hljs-property">children</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="BTW——当内置组件混合使用时的嵌套顺序"><a href="#BTW——当内置组件混合使用时的嵌套顺序" class="headerlink" title="BTW——当内置组件混合使用时的嵌套顺序"></a>BTW——当内置组件混合使用时的嵌套顺序</h3><p>transition&gt;keep-alive&gt;component</p><h3 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h3><p>用不同的输入参数一次又一次地执行相同的代码块，直到达到结束点<br>[注意点]</p><ol><li>数据源必须来自上游</li><li>递归组件必须要有”name”属性，且值与组件文件名一致</li><li>必须要有v-if的终止渲染条件<br>v-if =”activeld” &amp;&amp; datalist[activeld].children<br>即需要 datalist[activeId] 存在 &amp;&amp; datalist[activeId] <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 假设我们在windows中绑定了一个arr --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;arr.length&gt;0||arr!=null&quot;</span>&gt;</span>hhh<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 报错出现在我们的前半条判断中，在我们判断数组的长度是否大于零的时候，需要先判断我们是否有数组，如果没有数组的话，那么这条数据就会发生报错 --&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="BTW——自定义组件"><a href="#BTW——自定义组件" class="headerlink" title="BTW——自定义组件"></a>BTW——自定义组件</h3><p>要么首字母大写，要么用中划线的方式</p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><ul><li>等所有dom更新完毕后触发(执行其指定的回调)，因为vue中dom更新是异步的才有这个东西</li><li>语法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 获取更新后的dom内容</span><br>    &#125;)<br>    <span class="hljs-variable language_">this</span>.$nextTick().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 获取更新后的dom内容</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li>应用场景</li></ul><ol><li>created()进行DOM操作一定要放在Vue.nextTick()的回调函数</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中</li></ol><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>在不修改原始数据的情况下，对数据进行计算并返回新数据，该方法只能用在插值语法中</p><ul><li>双大括号插值和v-bind 表达式（后者从2.1.0+开始支持）<h2 id="过滤器函数总接收表达式的值作为第一个参数"><a href="#过滤器函数总接收表达式的值作为第一个参数" class="headerlink" title="过滤器函数总接收表达式的值作为第一个参数"></a>过滤器函数总接收表达式的值作为第一个参数</h2><!-- 在双大括号中 -->   两个大括号中间写着 message |<!-- 在v-bind 中 --><div v-bind:msg="message | filter"></div>在上述例子汇总，filter过滤器函数将会收到message的值作为第一个参数</li></ul><h2 id="过滤器可以串联"><a href="#过滤器可以串联" class="headerlink" title="过滤器可以串联"></a>过滤器可以串联</h2><ul><li>两个大括号中间写着 message | filterA | filterB<br>在这个例子中，filterA被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将filterA的结果传递到filterB中<h2 id="过滤器是javascript-函数可以接收参数"><a href="#过滤器是javascript-函数可以接收参数" class="headerlink" title="过滤器是javascript 函数可以接收参数"></a>过滤器是javascript 函数可以接收参数</h2></li><li>两个大括号中间写着 message | filterA(‘arg1’,arg2<br>filterA被定义为接收三个参数的过滤器函数。其中message的值作为第一个参数，普通字符串’arg1’作为第二个参数，表达式arg2作为第三个参数</li></ul><h2 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h2><p>filter 每次只能写一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;prefix&quot;</span>,<span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> <span class="hljs-string">&quot;¥&quot;</span>+n)<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>|</code> 叫管道符号</p><ul><li>语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(filterName,<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-comment">//数据处理结果&#125;)</span><br></code></pre></td></tr></table></figure></li><li>实际开发使用</li><li>step1 用在数据修饰上，通常我们把函数抽离出去，统一放在个.js文件中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// filter.js</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">filterPrice</span>=(<span class="hljs-params">value</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;已收款&#x27;</span> + value.<span class="hljs-string">&#x27;元&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">filterDate</span>=(<span class="hljs-params">value</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> value + <span class="hljs-string">&#x27;天&#x27;</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;filterPrice,filterDate&#125;<br></code></pre></td></tr></table></figure><ul><li>step2 在main.js中导入上边filter.js文件，也可以在任何组件中导入filter.js这个文件，但对于全局过滤器来说，最好是在main.js中定义，导入的是一个对象，所以使用Object.keys()方法，得到一个由key组成的数组，遍历数组，让key作为全局过滤器的名字，后面的是key对应的处理函数，这样在任何一个组件中都可以使用全局过滤器了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br>    <span class="hljs-comment">// 两种导入方式 推荐第一种</span><br>    <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> filters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./filter&#x27;</span><br>    <span class="hljs-keyword">import</span> &#123;filterPrice,filterDate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./filter&#x27;</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(filters.<span class="hljs-property">default</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(item,filters.<span class="hljs-property">default</span>[item])<br>    &#125;)<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        router,<br>        store,<br>        <span class="hljs-attr">render</span>:<span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>    &#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>step3<br>在组件中使用 全局过滤器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filterCount&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>两个大括号中间写 filterCount | filterPrice<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>两个大括号中间写 filterCount | filterDate<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">filterCount</span>:<span class="hljs-number">1500</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组件过滤器"><a href="#组件过滤器" class="headerlink" title="组件过滤器"></a>组件过滤器</h2><p>filters可以写很多个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">filters</span>:&#123;<span class="hljs-title function_">n1</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">return</span> n+<span class="hljs-number">2</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filterCount&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;filter&quot;</span>&gt;</span>两个大括号中间写 filterCount | changeCapitalLetter<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">filterCount</span>:<span class="hljs-string">&#x27;hello&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">filters</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">changeCapitalLetter</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// value是输入框的内容也是要显示的</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(value) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> str = value.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取英文，以空格分组把字符串转为数组，遍历每一项第一项转为大写字母</span></span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> newArr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">ele</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> ele.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUppeCase</span>()+ele.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> newArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">// 数组转字符串以空格输出</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>常见使用场景：格式日期(时间)，金钱单位，保留小数位</li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><ul><li>定义:[简单来说]就是模块化就是将变量和函数,放入不同的文件中<h2 id="模块的优点"><a href="#模块的优点" class="headerlink" title="模块的优点?"></a>模块的优点?</h2></li></ul><ol><li>可维护性强:因为模块独立，代码依赖小，自己可以独立更新和改进</li><li>命名空间:一般一个变量在最顶级的函数外声明，可以全局使用，易出现命名冲突的情况。使用模块化开发来封装变量，可以避免全局污染</li><li>重用代码：通过模块引用的方式，来复用代码<h2 id="CommonJS-AMD-CMD"><a href="#CommonJS-AMD-CMD" class="headerlink" title="CommonJS AMD/CMD"></a>CommonJS AMD/CMD</h2></li></ol><ul><li>定义：CommonJS是一种规范语法，内容有很多种，nodejs是这种规范的实现<br>【扩展】：1.SeaJS是模块加载器，是用CMD规范<pre><code class="hljs">    2.AMD/CMD是从 CommonJS 讨论中诞生的    3.RequireJS 遵循 AMD（异步模块定义）规范    4.Sea.js 遵循 CMD （通用模块定义）规范</code></pre>  规范的不同，导致了两者 API 不同。<br>  [AMD] 提前执行：提前异步并行加载<pre><code class="hljs">      优点：尽早执行依赖可以尽早发现错误      缺点：易产生浪费</code></pre>  [CMD] 延迟执行：延迟按需加载<pre><code class="hljs">      优点：减少资源浪费      缺点：等待时间长、出错时间延后</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// CMD 依赖就近 </span><br><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>,<span class="hljs-built_in">exports</span>,<span class="hljs-variable language_">module</span></span>)&#123;<span class="hljs-comment">// 定义模块</span><br>    <span class="hljs-keyword">var</span> demo=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;demo&#x27;</span>)<br>    <span class="hljs-keyword">var</span> x=demo.<span class="hljs-title function_">demo</span>()<br>    <span class="hljs-keyword">var</span> web=&#123;<br>        <span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>            <span class="hljs-keyword">return</span> x+y<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">web</span>:web<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure>  [RequireJS] 前端模块化管理工库<pre><code class="hljs">      详解：通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新函数(模块)，我们所有关于新模块的业务代码都在这个函数内部操作，其内部也可以无限制的使用已经加载进来的模块</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-built_in">require</span>.<span class="hljs-title function_">config</span>(&#123;<br>    <span class="hljs-attr">abc</span>:&#123;<br>        <span class="hljs-string">&#x27;boostrap&#x27;</span>:&#123;<br>            <span class="hljs-attr">deps</span>:[<span class="hljs-string">&#x27;jquery&#x27;</span>],<br>            <span class="hljs-attr">exports</span>:<span class="hljs-string">&#x27;boostrap&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">paths</span>:&#123;<br>        <span class="hljs-string">&quot;jquery&quot;</span>:<span class="hljs-string">&quot;路径&quot;</span>,<br>        <span class="hljs-string">&quot;boostrap&quot;</span>:<span class="hljs-string">&quot;路径&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-string">&quot;index&quot;</span><br>    &#125;<br>&#125;);<br><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;jquery&#x27;</span>,<span class="hljs-string">&#x27;boostrap&#x27;</span>,<span class="hljs-string">&#x27;index&#x27;</span>],<span class="hljs-keyword">function</span>(<span class="hljs-params">$,bootstrap,index</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index.<span class="hljs-property">web</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">11</span>));<br>    $(<span class="hljs-string">&quot;.p1&quot;</span>).<span class="hljs-title function_">text</span>(index.<span class="hljs-property">web</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">11</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h2></li><li>导入导出<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;AI&#x27;</span>;<br><span class="hljs-keyword">var</span> phone = <span class="hljs-string">&#x27;3571678&#x27;</span><br><span class="hljs-keyword">var</span> hobby = <span class="hljs-string">&#x27;购物&#x27;</span>;<br><span class="hljs-comment">// 普通导出导入</span><br>    <span class="hljs-keyword">export</span> &#123;name, phone, hobby&#125;;<br>    <span class="hljs-comment">// 导入</span><br>    <span class="hljs-keyword">import</span> &#123;name, phone, hobby&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/moduleA&#x27;</span> <br><span class="hljs-comment">// 导出export别名</span><br>    <span class="hljs-keyword">export</span> &#123; name <span class="hljs-keyword">as</span> v1, age <span class="hljs-keyword">as</span> v2, hobby <span class="hljs-keyword">as</span> v3&#125;;<br>    <span class="hljs-comment">// 导入</span><br>    <span class="hljs-keyword">import</span> &#123;v1, v2, v3&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/moduleA&#x27;</span>;<br><span class="hljs-comment">//导出export default仅有一个</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;lll&#x27;</span>,<span class="hljs-attr">hobby</span>:<span class="hljs-string">&#x27;games&#x27;</span>&#125;<br>    <span class="hljs-comment">// 导入</span><br>    <span class="hljs-keyword">import</span> obj <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/moduleD&#x27;</span><br><span class="hljs-comment">// 定义公共数据</span><br>    <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sexData=[<br>        &#123;<span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;man&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">key</span>:<span class="hljs-string">&#x27;woman&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;<br>    ]<br>    <span class="hljs-comment">//用户</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userData = [<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;name1&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;name2&#x27;</span>&#125; <br>    ];<br>    <span class="hljs-comment">// 导入</span><br>    <span class="hljs-keyword">import</span> &#123;sexData,userData&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./views/moduleB&#x27;</span> <br></code></pre></td></tr></table></figure></li><li>图片的导入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.直接导入 &lt;img src=&#x27;&#x27;&gt;</span><br><span class="hljs-comment">// 2.通过import</span><br>    <span class="hljs-keyword">import</span> img1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./assets/img/1.jpg&#x27;</span> <span class="hljs-comment">//导入图片</span><br>    &lt;img :src=<span class="hljs-string">&quot;img1&quot;</span> /&gt;&lt;/div&gt; <br><span class="hljs-comment">// 3.通过require的方式</span><br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">return</span>&#123;<br>           <span class="hljs-attr">img</span>:[<br>               <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@/assets/img/1.jpg&quot;</span>),<br>               <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@/assets/img/2.jpg&quot;</span>)<br>           ]<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="common-js和es6模块的区别？"><a href="#common-js和es6模块的区别？" class="headerlink" title="common.js和es6模块的区别？"></a>common.js和es6模块的区别？</h2>node使用的是commonjs 在使用模块的时候是运行时同步加载的，拷贝模块中的对象，模块可以多次加载，但只会在第一次加载，之后会被缓存，引入的是缓存中的值</li><li>commonjs输出的是一个值的拷贝，而es6输出的是值的引用</li><li>commonjs是运行时加载，es6是编译时输出接口</li></ul><h1 id="混入mixins"><a href="#混入mixins" class="headerlink" title="混入mixins"></a>混入mixins</h1><ul><li>定义：将多个组件内重复使用的js部分抽离出来，作为混入文件，哪里复用插哪里<h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// mixins.js</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>      <span class="hljs-comment">// ...组件内所有的配置，这里都有</span><br>        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>        <span class="hljs-attr">props</span>:[],<br>        <span class="hljs-attr">methods</span>:&#123;&#125;,<br>        <span class="hljs-comment">// 生命周期</span><br>        <span class="hljs-attr">mixins</span>:[],<br>        <span class="hljs-attr">components</span>:&#123;&#125;,<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// App.vue</span><br>    <span class="hljs-keyword">import</span> mixins <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mixins&quot;</span>;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>        <span class="hljs-attr">mixins</span>:[mixins,p,p]<span class="hljs-comment">//为什么要写成数组形式？因为这里面有顺序,若函数有重复会依次合并，</span><br>    &#125;<br></code></pre></td></tr></table></figure>为了复用代码，复用js，三个组件，每个组件内都有同一个业务，同一个事件，并且事件的处理内容都一样<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2>只能复用js，且组成部分与vue组件中的script完全一致<h2 id="混入的优缺点"><a href="#混入的优缺点" class="headerlink" title="混入的优缺点"></a>混入的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3>节省代码量，让代码高复用，降低了代码的重复率。让vue组件’瘦身’<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3>容易冲突，不好控制，后期维护成本高<h2 id="执行顺序及特性"><a href="#执行顺序及特性" class="headerlink" title="执行顺序及特性"></a>执行顺序及特性</h2>执行顺序是先执行混入文件后执行组件。如果mixins里有多个混入的话，会按照顺序依次执行<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3></li></ul><ol><li>数据、函数，如果组件内和混入里的命名重复了则使用组件内的覆盖混入里的</li><li>如果混入里和组件内有相同的生命周期，则两个生命周期都会执行，先执行混入后执行组件<h2 id="extends扩展"><a href="#extends扩展" class="headerlink" title="extends扩展"></a>extends扩展</h2>扩展执行表现形式和混入完全一样<h2 id="extends和mixins区别"><a href="#extends和mixins区别" class="headerlink" title="extends和mixins区别"></a>extends和mixins区别</h2></li></ol><ul><li>扩展只能挂载一个</li><li>而混入可以使用数组的方式挂载很多个混入</li></ul><h1 id="数据监听"><a href="#数据监听" class="headerlink" title="数据监听"></a>数据监听</h1><h2 id="方法一：利用keyup事件来实现"><a href="#方法一：利用keyup事件来实现" class="headerlink" title="方法一：利用keyup事件来实现"></a>方法一：利用keyup事件来实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 定义一个getFullName函数</span><br>        <span class="hljs-comment">// &lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; @keyup =&quot;getFullName&quot;&gt; +</span><br>        <span class="hljs-comment">// &lt;input type=&quot;text&quot; v-model=&quot;firstname&quot; @keyup=&quot;getFullName&quot;&gt; =</span><br>        <span class="hljs-comment">// &lt;input type=&quot;text&quot; v-model=&quot;fullname&quot; @keyup=&quot;getFullName&quot;&gt; </span><br><span class="hljs-comment">// 在vm中定义方法</span><br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-attr">lastname</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">firstname</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">fullname</span>:<span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">getFullName</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullname</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastname</span>+<span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstname</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="watch侦听器"><a href="#watch侦听器" class="headerlink" title="watch侦听器"></a>watch侦听器</h2><ul><li>专门用于监听数据变化的<br>  使用这个属性，可以监视data中指定数据的变化，然后触发这个watch中对应的function可以不用绑定事件<h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3></li><li>在watch中可以对另外一个数据修改</li><li>可以对监听的数据进行固定值赋值，因为watch会新旧值对比，发现一致则不会再触发监听了</li><li>监听数据，赋值如果是递增或递减则会报错</li><li>默认只能是监听基本数据类型和数组的值</li><li>如果监听的是对象，则需要对象写法</li><li>不需要返回值</li><li>它可以执行异步操作：定时器、ajax<h3 id="watch–监听数据变化"><a href="#watch–监听数据变化" class="headerlink" title="watch–监听数据变化"></a>watch–监听数据变化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastname&quot;</span>&gt;</span> +<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span> =<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fullname&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">lastname</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">firstname</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">fullname</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;&#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;lastname&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullname</span>=newVal+<span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstname</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;firstname&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullname</span>=newVal+<span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">lastname</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三个选项"><a href="#三个选项" class="headerlink" title="三个选项"></a>三个选项</h3></li><li>handler 平时的写法，就默认写的是handler</li><li>immediate<ul><li>默认false，在进入页面，第一次绑定值，不会立刻执行监听，只有数据发生改变才会执行handler中的操作</li><li>为true时，handler在第一次绑定值时就触发</li></ul></li><li>deep 用来进行深度监听，监听到对象属性的变化<h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.监听基本数据类型</span><br><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-title function_">name</span>(<span class="hljs-params">val,oldVal</span>) &#123; <br>        <span class="hljs-comment">// val是新值，oldVal是旧值</span><br>    &#125;,<br>    <span class="hljs-comment">// 等价于</span><br>    <span class="hljs-attr">name</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>    <span class="hljs-comment">// 不能写箭头函数，因为箭头函数中的this值的是函数定义时所在的对象而不是函数运行时所在的对象</span><br>    <span class="hljs-comment">// name: () =&gt; &#123;&#125; // error xxx</span><br><br><span class="hljs-comment">// 2. 监听对象</span><br><span class="hljs-attr">watch</span>:&#123;<br>    <span class="hljs-attr">obj</span>:&#123;<br>        <span class="hljs-comment">// 深度监听</span><br>        <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 执行函数</span><br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params">val</span>) &#123;&#125;,<br>        <span class="hljs-comment">// 自动执行一次</span><br>        <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 只监听对象中的某一个属性值</span><br><span class="hljs-comment">// 点语法只限于对象使用，数组不可以</span><br>    <span class="hljs-string">&#x27;obj.age&#x27;</span>(val,old)&#123;&#125;<br>    <span class="hljs-string">&#x27;obj.age&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="watch–监听路由变化"><a href="#watch–监听路由变化" class="headerlink" title="watch–监听路由变化"></a>watch–监听路由变化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span>&gt;</span>登陆<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;$route.path&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val,oldVal</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(newVal===<span class="hljs-string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;欢迎进入login&#x27;</span>)</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newVal===<span class="hljs-string">&#x27;/register&#x27;</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;欢迎进入register&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// router/index.js</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">routes</span>:[</span><br><span class="language-javascript">            &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/login&#x27;</span>&#125;,</span><br><span class="language-javascript">            &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;login&#x27;</span>,<span class="hljs-attr">component</span>:login&#125;,</span><br><span class="language-javascript">            &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;register&#x27;</span>,<span class="hljs-attr">component</span>:register&#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><ul><li>定义：监听一个值返回一个新值，且新值必须使用才能监听成功<h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3></li><li>由于计算属性需要立即返回新值，因此不能处理异步操作</li><li>计算属性不受数据类型限制，任何数据都可以被监听</li><li>默认计算属性的值是只读的，不可以直接修改</li><li>如果要修改计算属性，则需要使用对象写法</li><li>计算属性可以监听多个值</li><li>有缓存，提高渲染性能</li><li>如果在页面上需要用到 对现有的数据进行加工得到新数据，则是要使用计算属性</li><li>想要给计算属性赋值，则需要使用set方法</li><li>计算属性和data一样，都需要设置return，当没有输出结果时，需要排查是不是return漏掉了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastname&quot;</span>&gt;</span> +<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstname&quot;</span>&gt;</span> =<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fullname&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">lastname</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">firstname</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;fullname&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastname</span>+<span class="hljs-string">&#x27;-&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">firstname</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>[!注意]</p><ol><li>fullname没有在data中定义，在computed定义fullname后直接return出去就好</li><li>计算属性的求值结果，会被缓存起来，方便下次直接使用</li><li>不会因为页面中调用几次函数去执行几次，只会根据函数执行来调用函数(比如页面放入很多插值,例如fullname，在function中console.log(ok),刷新页面时，后台只会出现一个OK和初始就在的OK)</li></ol><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>    <span class="hljs-comment">// 基础使用</span><br>    <span class="hljs-title function_">newStr</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">str</span>+<span class="hljs-string">&#x27;xxx&#x27;</span><br>    &#125;,<br>    <span class="hljs-comment">// 修改写法</span><br>    <span class="hljs-attr">myData</span>:&#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">my</span><br>        &#125;,<br>        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">my</span> = value<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="watch-computed-methods-对比"><a href="#watch-computed-methods-对比" class="headerlink" title="watch computed methods 对比"></a>watch computed methods 对比</h2><ul><li>computed属性结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用</li><li>methods 方法表示一个具体的操作，主要书写业务逻辑</li><li>watch一个对象，键时需要观察的表达式，值对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体<h2 id="watch-computed-区别"><a href="#watch-computed-区别" class="headerlink" title="watch computed 区别"></a>watch computed 区别</h2></li><li>watch不支持缓存，computed有缓存</li><li>watch支持异步，computed不支持异步</li><li>watch不需要返回新值，computed需要返回新值</li><li>watch只能监听一个属性，computed能监听多个属性</li><li>watch只能监听基本数据类型和数组的值，computed不受数据类型限制</li></ul><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>扩展了vue没有的操作dom的指令，比如登录页的用户名输入框自动获取焦点，根据用户权限控制某些元素的是否可见等。</p><h2 id="组件内"><a href="#组件内" class="headerlink" title="组件内"></a>组件内</h2><p>directives</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 声明</span></span><br><span class="language-javascript">    <span class="hljs-attr">directives</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">focus</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 绑定的时候初始化</span></span><br><span class="language-javascript">            <span class="hljs-title function_">bind</span>(<span class="hljs-params">el,binding</span>)&#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 元素的父集已经呈现，用于指令的操作</span></span><br><span class="language-javascript">            <span class="hljs-title function_">inserted</span>(<span class="hljs-params">el,binding</span>)&#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// 更新：自己更新，不能保证子元素更新完</span></span><br><span class="language-javascript">            <span class="hljs-title function_">update</span>(<span class="hljs-params">el,binding</span>)&#123;&#125;,</span><br><span class="language-javascript">             <span class="hljs-comment">// 等待当前组件的所有元素全部更新完毕</span></span><br><span class="language-javascript">            <span class="hljs-title function_">componentUpdate</span>(<span class="hljs-params">el,binding</span>)&#123;&#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 指令解绑，当组件被销毁的时候触发</span></span><br><span class="language-javascript">            <span class="hljs-title function_">unbind</span>(<span class="hljs-params">el,binding</span>)&#123;&#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">v-focus</span>=<span class="hljs-string">&#x27;show&#x27;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p>directive 每次只能声明一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&quot;hidden&quot;</span>,&#123;<br>    <span class="hljs-title function_">inserted</span>(<span class="hljs-params">el,binding,vnode</span>)&#123;<br>        <span class="hljs-comment">// binding.value是指令绑定入参</span><br>        <span class="hljs-keyword">if</span>(binding.<span class="hljs-property">value</span>)&#123;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;none&quot;</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&quot;block&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作"><a href="#根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作" class="headerlink" title="根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作"></a>根据URL分配到对应的应用程序；作用就是解析URL，调用对应的控制器。简而言之，路由是指把数据从一个地方传送到另一个地方的行为和动作</h2><h2 id="vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接"><a href="#vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接" class="headerlink" title="vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接"></a>vue路由有助于在浏览器的URL或历史记录与Vue组件之间建立链接</h2><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用router-link组件来导航 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过传入`to`属性指定链接 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- router-link 默认会被渲染成一个&lt;a&gt;&lt;/a&gt;标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/news&quot;</span>&gt;</span>news<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br><span class="hljs-comment">&lt;!-- 路由匹配到的组件渲染在这里 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>[1.定义路由组件]:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> <span class="hljs-title class_">Home</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#home&#x27;</span>&#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> <span class="hljs-title class_">News</span> = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#news&#x27;</span>&#125;</span><br><span class="language-javascript">   </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 对应的模块内容： --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>组件home<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>组件news<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>[2.定义路由]：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router/index.js</span><br>    <span class="hljs-keyword">const</span> routes = [<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/news&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span>&#125;, <br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span>&#125;<br>    ];<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    路由命名：</span><br><span class="hljs-comment">        有时候通过一个名称来标识一个路由显得更方便一些，特别是链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-attr">routes</span>:[<br>       &#123;<br>           <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>,<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>       &#125;<br>   ]<br></code></pre></td></tr></table></figure><p>[3.创建router实例]：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br>    <span class="hljs-keyword">const</span> router=<span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>        routes,<span class="hljs-comment">//(缩写)相当于 routes: routes</span><br>        <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span><span class="hljs-comment">// 链接激活时默认使用的css类名，用到linkActiveClass来配置，在路由的构造选项里配置默认类名为active</span><br>    &#125;)<br></code></pre></td></tr></table></figure><p>[4.创建和挂载根实例]：<br>记得要通过 router 配置参数注入路由，从而让整个应用都有路由功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>        <span class="hljs-attr">el</span>:<span class="hljs-string">`#my`</span>,【<br>        router<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设置路由导航的两种方式"><a href="#设置路由导航的两种方式" class="headerlink" title="设置路由导航的两种方式"></a>设置路由导航的两种方式</h2><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3> <router-link :to="/home"><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3><p>router.push(‘/home’)</p><h3 id="声明式的常见方式"><a href="#声明式的常见方式" class="headerlink" title="声明式的常见方式"></a>声明式的常见方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 路由通过名称 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;homename&#x27;&#125;&quot;</span>&gt;</span>home<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 直接路由带查询 --&gt;</span><br><span class="hljs-comment">&lt;!-- 参数query，地址栏变成/home?id=10 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    path:&#x27;/home&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    query:&#123;id:10&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;&quot;</span>&gt;</span><br>    home<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 命名路由带参查询query，地址栏变成/home?id=10 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    name:&#x27;homename&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    query:&#123;id:10&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">    &#125;&quot;</span>&gt;</span><br>    home<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编程式常见方法"><a href="#编程式常见方法" class="headerlink" title="编程式常见方法"></a>编程式常见方法</h3><ul><li>字符串 router.push(‘/home’)</li><li>对象 router.push({path:’/home’})</li><li>路由通过名称 router.push({name:’homename’})</li><li>直接路由带查询参数query,地址栏变成/home?id=10</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">push</span>(<br>    &#123;<br>        <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;home&#x27;</span>,<br>        <span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">10</span>&#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><ul><li>命名路由带查询query，地址栏变成/home?id=10</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">push</span>(<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;homename&#x27;</span>,<br>    <span class="hljs-attr">query</span>:&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">10</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><h3 id="传入参数的方式"><a href="#传入参数的方式" class="headerlink" title="传入参数的方式"></a>传入参数的方式</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>例：<a href="http://localhost:8080/user/10">http://localhost:8080/user/10</a><br><router-link :to="'/user/'+id">user</router-link></p><ul><li>路由配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> routes=[<br>    &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,<br>    &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/news&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">News</span>&#125;, <br>    &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>&#125;, <br>    <span class="hljs-comment">//路由中定义http://localhost:8080/#/user/10 需要定义ID</span><br>]<br></code></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4>例：<a href="http://localhost:8080/home?id=10">http://localhost:8080/home?id=10</a><br>传入参数的方式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;</span></span><br><span class="hljs-string"><span class="hljs-tag">    path:&#x27;/home&#x27;,</span></span><br><span class="hljs-string"><span class="hljs-tag">    query: &#123;id: id&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">&#125;&quot;</span>&gt;</span><br>test<br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>路由中定义：user?id=10 不需要在路由配置中定义参数</p><h3 id="常见路由对象"><a href="#常见路由对象" class="headerlink" title="常见路由对象"></a>常见路由对象</h3><p>在使用vue-router的应用中，路由对象会被注入每个组件中，赋值为this.$route，并且当路由切换时，路由对象会被更新，路由对象暴露了以下属性</p><p>监听单个对象,默认开启深度监听</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试题归纳</title>
    <link href="/2023/03/29/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/03/29/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是路由？-路由怎么实现？"><a href="#什么是路由？-路由怎么实现？" class="headerlink" title="什么是路由？ 路由怎么实现？"></a>什么是路由？ 路由怎么实现？</h1><p>  根据不同的url显示不同的页面<br>  声明式：<router-link>的参数是to(路由的链接)<br>  编程式：this.$router.push (可以使用query传递参数)</p><h1 id="路由模式："><a href="#路由模式：" class="headerlink" title="路由模式："></a>路由模式：</h1><p>  hash：window.location.hash (地址栏可见的#键)<br>  history：window.history (发生变化的url会被记录下来，从而浏览器可以使用前进后退)</p><h1 id="路由的参数有几种实现方式？"><a href="#路由的参数有几种实现方式？" class="headerlink" title="路由的参数有几种实现方式？"></a>路由的参数有几种实现方式？</h1><p>  params：隐式类型：地址栏不可见，刷新容易丢失<br>          显示类型：地址栏可见，刷新不容易丢失<br>  query：类似于git，地址栏可见，刷新不容易丢失</p><h1 id="在js中，数据类型分为几类？它们的数据类型分别那有些？"><a href="#在js中，数据类型分为几类？它们的数据类型分别那有些？" class="headerlink" title="在js中，数据类型分为几类？它们的数据类型分别那有些？"></a>在js中，数据类型分为几类？它们的数据类型分别那有些？</h1><p>  基础数据类型：number，boolean，string，undefined，null<br>  (基础数据类型保存在栈内存中，操作的是值，改变原数据不会影响新变量)<br>  引用数据类型：object，array，function<br>  (引用数据类型保存在堆内存中，操作的是地址，改变其中一个另一个受影响)</p><h1 id="说说你对栈和堆的理解？"><a href="#说说你对栈和堆的理解？" class="headerlink" title="说说你对栈和堆的理解？"></a>说说你对栈和堆的理解？</h1><p>  栈：系统自动分配的，速度快，空间小，<br>  堆：是人为开辟的，速度慢，空间大</p><h1 id="如何使用js给一个按钮绑定多个事件？"><a href="#如何使用js给一个按钮绑定多个事件？" class="headerlink" title="如何使用js给一个按钮绑定多个事件？"></a>如何使用js给一个按钮绑定多个事件？</h1><p>  用事件监听 addEventListener绑定两个事件</p><h1 id="给出一个对象给出它的key和value？"><a href="#给出一个对象给出它的key和value？" class="headerlink" title="给出一个对象给出它的key和value？"></a>给出一个对象给出它的key和value？</h1><p>  key：需要使用object.keys(obj)的方法，返回一个数组，这个数组包含所有obj对象上的key<br>  value：需要使用object.values(obj)的方法，返回一个数组，这个数组包含所有obj对象上的value</p><h1 id="什么是闭包？-优缺点？"><a href="#什么是闭包？-优缺点？" class="headerlink" title="什么是闭包？ 优缺点？"></a>什么是闭包？ 优缺点？</h1><p>  内部函数被保存到外都都会产生闭包<br>  优点：防止污染全局变量<br>  缺点：容易造成内存泄漏<br>  作用：①可以做缓存 ②实现公有变量 ③实现封装私有化 ④防止污染全局变量</p><h1 id="如何解决闭包造成的内存泄漏？"><a href="#如何解决闭包造成的内存泄漏？" class="headerlink" title="如何解决闭包造成的内存泄漏？"></a>如何解决闭包造成的内存泄漏？</h1><p>  将事件处理函数定义在外部，解除闭包</p><h1 id="Dom和Bom是什么？作用有哪些？"><a href="#Dom和Bom是什么？作用有哪些？" class="headerlink" title="Dom和Bom是什么？作用有哪些？"></a>Dom和Bom是什么？作用有哪些？</h1><p>  Dom：文档对象模型 (用于做增删改查)<br>  Bom：浏览器对象模型 (用于浏览器上的事件)</p><h1 id="Dom事件流："><a href="#Dom事件流：" class="headerlink" title="Dom事件流："></a>Dom事件流：</h1><p>  当一个HTML元素上产生一个事件时，该事件会在DOM树中元素节点与根节点之间按特定的顺序传播，<br>  路径所经过的节点都会收到该事件，这个传播过程就是DOM事件流。</p><h1 id="vue中v-if和v-show的共同点和不同点？"><a href="#vue中v-if和v-show的共同点和不同点？" class="headerlink" title="vue中v-if和v-show的共同点和不同点？"></a>vue中v-if和v-show的共同点和不同点？</h1><p>  v-if：控制元素的销毁与渲染 (是通过dom元素来控制的)<br>  v-show：控制元素的显示与隐藏 (通过display：none来实现的)<br>  频繁切换要用v-show</p><h1 id="vue中如何正确使用定时器？"><a href="#vue中如何正确使用定时器？" class="headerlink" title="vue中如何正确使用定时器？"></a>vue中如何正确使用定时器？</h1><p>  要在页面关闭的时候清除定时器<br>  在beforeDestroy()生命周期中清除定时器</p><h1 id="写出html常用的标签-行内元素有哪些？-块级元素有哪些？css盒模型？"><a href="#写出html常用的标签-行内元素有哪些？-块级元素有哪些？css盒模型？" class="headerlink" title="写出html常用的标签 行内元素有哪些？ 块级元素有哪些？css盒模型？"></a>写出html常用的标签 行内元素有哪些？ 块级元素有哪些？css盒模型？</h1><p>  行内元素：span，i，a，img，button<br>  块级元素：div，p，ul，li，form<br>  盒模型：content，padding，border，margin</p><h1 id="标准盒模型和怪异盒模型的区别？"><a href="#标准盒模型和怪异盒模型的区别？" class="headerlink" title="标准盒模型和怪异盒模型的区别？"></a>标准盒模型和怪异盒模型的区别？</h1><p>  宽度和高度的计算方式不同<br>  标准盒模型：<br>    width = content-width<br>    height = content-height<br>  怪异盒模型:<br>    width = content-width + padding-width + border-width<br>    height = content-height + padding-height + border-height</p><h1 id="css3的新特性？"><a href="#css3的新特性？" class="headerlink" title="css3的新特性？"></a>css3的新特性？</h1><p>  阴影：box-shadow<br>  圆角：border-radius<br>  边框图片：border-image<br>  渐变：<br>  动画</p><h1 id="常用的布局方式？"><a href="#常用的布局方式？" class="headerlink" title="常用的布局方式？"></a>常用的布局方式？</h1><p>  浮动布局<br>  定位布局<br>  flex布局</p><h1 id="img标签中的title和alt的区别？"><a href="#img标签中的title和alt的区别？" class="headerlink" title="img标签中的title和alt的区别？"></a>img标签中的title和alt的区别？</h1><p>  title：鼠标划过去显示的内容<br>  alt：图片不能正常加载的时候显示的提示语</p><h1 id="localStorage，sessionStorage，cookie的作用，区别是什么？"><a href="#localStorage，sessionStorage，cookie的作用，区别是什么？" class="headerlink" title="localStorage，sessionStorage，cookie的作用，区别是什么？"></a>localStorage，sessionStorage，cookie的作用，区别是什么？</h1><p>  localStorage：会话周期是永久的，除非主动删除<br>  sessionStorage：生命周期是会话周期，浏览器窗口关闭后就消失了<br>  cookie：单个域名下数量有限，可以跨页面，浏览器生命周期存在<br>  存储大小？<br>    localStorage的大小一般为5M<br>    sessionStorage的大小一般为5M<br>    cookie的大小一般为4K<br>  与服务器端的通信？<br>    localStorage不参与服务器端的通信。<br>    sessionStorage不参与服务器端的通信<br>    cookie参与服务器端通信，每次都会携带http的头信息中</p><h1 id="本地存储的作用？"><a href="#本地存储的作用？" class="headerlink" title="本地存储的作用？"></a>本地存储的作用？</h1><p>  ▪用户的会话信息（如用户登录信息，购物车数据）<br>  ▪用户的个性化设置（如网站设置）<br>  ▪保存临时数据（如一些中间过程的数据）<br>  ▪缓存（如缓存后端接口的数据，可以减少对后端服务器的压力）<br>  ▪记录分析用户行为</p><h1 id="css的引入方法有哪些？link和-import的区别？"><a href="#css的引入方法有哪些？link和-import的区别？" class="headerlink" title="css的引入方法有哪些？link和@import的区别？"></a>css的引入方法有哪些？link和@import的区别？</h1><p>  内嵌<br>  行内<br>  外链<br>  link属于html标签<br>  @import是css提供的</p><h1 id="在响应式页面布局中有哪些需要注意的点？"><a href="#在响应式页面布局中有哪些需要注意的点？" class="headerlink" title="在响应式页面布局中有哪些需要注意的点？"></a>在响应式页面布局中有哪些需要注意的点？</h1><p>  要注意屏幕的尺寸和设备的类型</p><h1 id="vue-js的两个核心是什么？"><a href="#vue-js的两个核心是什么？" class="headerlink" title="vue.js的两个核心是什么？"></a>vue.js的两个核心是什么？</h1><p>  数据驱动和组件系统<br>  1.数据驱动，即是ViewModel，是指视图是由数据驱动生成的，我们对视图的修改，不会直接操作DOM，而是通过修改数据，保证了数据和视图的一致性。<br>  2.组件系统，组件的出现就是为了解决页面布局等等一系列问题，而vue中的组件分为两种，全局组件和局部组件，它提供了强大的页面布局功能。</p><h1 id="vue中一个元素如何绑定多个事件？"><a href="#vue中一个元素如何绑定多个事件？" class="headerlink" title="vue中一个元素如何绑定多个事件？"></a>vue中一个元素如何绑定多个事件？</h1><p>  在元素上使用@click绑定一个add1 add2用逗号隔开 然后在methods添加事件的函数</p><h1 id="Doctype作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#Doctype作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="Doctype作用？严格模式与混杂模式如何区分？它们有何意义？"></a>Doctype作用？严格模式与混杂模式如何区分？它们有何意义？</h1><p>  doctype 是html5标准网页声明，且必须声明在html文档的第一行<br>  严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码，呈现页面<br>  混杂模式：又称怪异模式或兼容模式，是指浏览器用自己的方式解析代码，即使用一种比较宽松的向后兼容的方式来显示页面</p><h1 id="如何居中div-如何居中一个浮动元素"><a href="#如何居中div-如何居中一个浮动元素" class="headerlink" title="如何居中div 如何居中一个浮动元素"></a>如何居中div 如何居中一个浮动元素</h1><p>  给div设置一个宽度，然后添加 margin:0 auto 属性</p><h1 id="css选择器有哪些-选择器的权重的优先级"><a href="#css选择器有哪些-选择器的权重的优先级" class="headerlink" title="css选择器有哪些 选择器的权重的优先级"></a>css选择器有哪些 选择器的权重的优先级</h1><p>  ld（权重100）&gt; class（权重10）&gt;标签（权重1）</p><h1 id="当页面显示内容超出显示区域是有哪些解决方法"><a href="#当页面显示内容超出显示区域是有哪些解决方法" class="headerlink" title="当页面显示内容超出显示区域是有哪些解决方法?"></a>当页面显示内容超出显示区域是有哪些解决方法?</h1><p>  overflow：hidden</p><h1 id="怎么判断一个变量是不是object"><a href="#怎么判断一个变量是不是object" class="headerlink" title="怎么判断一个变量是不是object"></a>怎么判断一个变量是不是object</h1><p>  object.prototype.toString.call</p><h1 id="js将字符串-“123”-反转"><a href="#js将字符串-“123”-反转" class="headerlink" title="js将字符串 “123” 反转"></a>js将字符串 “123” 反转</h1><p>  用split将字符串切割成数组，再用数组reverse的方法进行反转，再用join将数组转为字符串</p><h1 id="jquery中-起什么作用，可以把-换成其他的吗"><a href="#jquery中-起什么作用，可以把-换成其他的吗" class="headerlink" title="jquery中$起什么作用，可以把$换成其他的吗"></a>jquery中$起什么作用，可以把$换成其他的吗</h1><p>  可以替换</p><h1 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h1><p>  浏览器从一个域名的页面去请求另一个域名的资源时，域名，端口，协议任一不同，都算是跨域</p><h1 id="解决跨域的问题？-跨域请求资源的方法有哪些"><a href="#解决跨域的问题？-跨域请求资源的方法有哪些" class="headerlink" title="解决跨域的问题？(# 跨域请求资源的方法有哪些?)"></a>解决跨域的问题？(# 跨域请求资源的方法有哪些?)</h1><p>  ①使用jsonp跨域(只支持get请求，不支持post请求)<br>  ②nginx反向代理</p><h1 id="let-var-const的区别"><a href="#let-var-const的区别" class="headerlink" title="let var const的区别"></a>let var const的区别</h1><p>  let：是块作用域，可以重复复制，没有变量提升<br>  const：是块作用域，只能赋值一次，没有变量提升<br>  var：受代码块影响，有变量提升</p><h1 id="for-in-和-for-of的区别"><a href="#for-in-和-for-of的区别" class="headerlink" title="for in 和 for of的区别"></a>for in 和 for of的区别</h1><p>  for in：遍历对象<br>  for of：不能遍历对象</p><h1 id="undefined和null的区别"><a href="#undefined和null的区别" class="headerlink" title="undefined和null的区别"></a>undefined和null的区别</h1><p>  undefined：未定义，表示现在没有，以后会有，转换为数值为0<br>  null：空，表示现在没有之后也不会有，转换为数值为NaN</p><h1 id="如何判断undefined和null"><a href="#如何判断undefined和null" class="headerlink" title="如何判断undefined和null"></a>如何判断undefined和null</h1><p>  用typeof方法：undefined==undefined  null==object</p><h1 id="说出Array常用的方法，并且说明方法的作用"><a href="#说出Array常用的方法，并且说明方法的作用" class="headerlink" title="说出Array常用的方法，并且说明方法的作用"></a>说出Array常用的方法，并且说明方法的作用</h1><p>  push：尾部添加<br>  unshift：头部添加<br>  shift：头部删除<br>  pop：尾部删除<br>  filter：过滤<br>  reverse：反转<br>  join：将数组转为字符串<br>  concat：拼接<br>  sort：排序</p><h1 id="如何实现深浅拷贝"><a href="#如何实现深浅拷贝" class="headerlink" title="如何实现深浅拷贝"></a>如何实现深浅拷贝</h1><p>  浅拷贝：一个对象拷贝另一个对象的引用地址，更在一个对象另一个对象也会跟着影响<br>  深拷贝：一个对象拷贝另一个对象的引用，更改一个对象另一个对象不受影响</p><h1 id="请介绍Promise？"><a href="#请介绍Promise？" class="headerlink" title="请介绍Promise？"></a>请介绍Promise？</h1><p>  promise是异步操作<br>  三种状态：成功：fullfilled  失败：rejected  进行时pending<br>  .then:用来解决回调地狱<br>  .catch：处理异常错误<br>  .then 有两个参数一个处理成功的函数，一个处理失败的函数</p><p>请介绍Promise的异常捕获？</p><h1 id="async-await使用特点？"><a href="#async-await使用特点？" class="headerlink" title="async / await使用特点？"></a>async / await使用特点？</h1><p>  async用来修饰function<br>  async函数返回promise<br>  await必须写在async函数里，await后面是promise<br>  在async函数中await的作用是把promise变成同步执行的</p><h1 id="src和herf的区别"><a href="#src和herf的区别" class="headerlink" title="src和herf的区别"></a>src和herf的区别</h1><p>  src：用来链接图片地址的<br>  herf：超文本引用，链接url地址</p><h1 id="css如何实现阴影"><a href="#css如何实现阴影" class="headerlink" title="css如何实现阴影"></a>css如何实现阴影</h1><p>  box-shadow：水平阴影，垂直阴影，范围，颜色</p><h1 id="常用的es6新特性有哪些？"><a href="#常用的es6新特性有哪些？" class="headerlink" title="常用的es6新特性有哪些？"></a>常用的es6新特性有哪些？</h1><p>  ①箭头函数<br>  ②模板字符串<br>  ③async/await<br>  ④promise</p><h1 id="提升前端性能的方法-Vue性能优化都有哪些方面？"><a href="#提升前端性能的方法-Vue性能优化都有哪些方面？" class="headerlink" title="提升前端性能的方法(Vue性能优化都有哪些方面？)"></a>提升前端性能的方法(Vue性能优化都有哪些方面？)</h1><p>  ①路由懒加载  ②keep-alive缓存页面  ③使用v-show复用DOM  ④变量本地化</p><h1 id="数组的遍历有几种"><a href="#数组的遍历有几种" class="headerlink" title="数组的遍历有几种"></a>数组的遍历有几种</h1><p>  map<br>  forEach<br>  filter</p><h1 id="typeof的值有哪些"><a href="#typeof的值有哪些" class="headerlink" title="typeof的值有哪些"></a>typeof的值有哪些</h1><p>  number，Boolean，string，undefined，object，function</p><h1 id="列出vue-router的导航守卫"><a href="#列出vue-router的导航守卫" class="headerlink" title="列出vue-router的导航守卫"></a>列出vue-router的导航守卫</h1><p>  全局守卫：前置守卫：router.beforeEach<br>              to：到哪去<br>              from：从哪来<br>           后置钩子：router.afterEach<br>           - 没有next<br>           - 功能：上报日志<br>  局部首位：前置守卫：before.routerEnter (没有this)<br>           更新守卫：before.routerUpdata<br>           离开守卫：before.routerLeave<br>          - 特点：当用户离开的时候，会发起询问，确认用户是否离开<br>          - next传入false则阻止离开</p><h1 id="vue生命周期及其适用场景"><a href="#vue生命周期及其适用场景" class="headerlink" title="vue生命周期及其适用场景"></a>vue生命周期及其适用场景</h1><p>  创建阶段：beforeCreate 创建前  (创建阶段用于做等待动画或骨架屏)<br>           Created 创建完成<br>  挂载阶段：beforeMount 挂载前<br>           Mounted  挂载完成   (挂在阶段用于自发请求数据)<br>  更新阶段：beforeUpdate  更新前  (更新阶段用于二次修改数据和观察数据)<br>           Updated 更新完成<br>  销毁阶段：beforeDestroy  销毁前   (卸载阶段用于清楚常驻内存的数据)<br>           Destroyed 销毁完成</p><h1 id="vue中的组件通信有哪些方式"><a href="#vue中的组件通信有哪些方式" class="headerlink" title="vue中的组件通信有哪些方式"></a>vue中的组件通信有哪些方式</h1><p>  父传子：父组件用v-bind绑定，子组件用props调用<br>  子传父：父组件用v-on传函数，子组件用$emit接收</p><h1 id="vuex的属性"><a href="#vuex的属性" class="headerlink" title="vuex的属性"></a>vuex的属性</h1><p>  state：状态<br>  getters：计算属性<br>  action：执行异步<br>  mutations：用来修改state状态<br>  modules：模块化</p><h1 id="如何消除一个数组里面重复的元素"><a href="#如何消除一个数组里面重复的元素" class="headerlink" title="如何消除一个数组里面重复的元素"></a>如何消除一个数组里面重复的元素</h1><p>  ①使用双重for循环<br>  ②es6中的newSet方法<br>  ③利用sort方法排序 (排序后数组的最后一位和新数组的第一位进行比较)</p><h1 id="split和join的区别"><a href="#split和join的区别" class="headerlink" title="split和join的区别"></a>split和join的区别</h1><p>  split：将字符串切割成数组的形式<br>  join：将数组转换为字符串</p><h1 id="数组-pop，push，unshift，shift，分别的属性是什么"><a href="#数组-pop，push，unshift，shift，分别的属性是什么" class="headerlink" title="数组 pop，push，unshift，shift，分别的属性是什么"></a>数组 pop，push，unshift，shift，分别的属性是什么</h1><p>  push：尾部添加<br>  undshift：头部添加<br>  shift：头部删除<br>  pop：尾部删除</p><h1 id="call，apply和bind的区别"><a href="#call，apply和bind的区别" class="headerlink" title="call，apply和bind的区别"></a>call，apply和bind的区别</h1><p>  他们的传参方式不同<br>  call：是直接调用，是立即执行函数，是传参数(第一个参数是上下文，后续是实例传入的参数)<br>  apply：直接调用，是立即执行函数，是传数组(有两个参数，第一个是上下文，第二个是参数组成的数组)<br>  bind：返回值是一个函数（不会立即执行，需要调用）</p><h1 id="如何阻止事件冒泡和默认事件"><a href="#如何阻止事件冒泡和默认事件" class="headerlink" title="如何阻止事件冒泡和默认事件"></a>如何阻止事件冒泡和默认事件</h1><p>  阻止事件冒泡：stopPropagation  // W3C<br>               cancel Bubble = true<br>  阻止默认事件：return value = false</p><h1 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h1><p>  overflow：hidden<br>  使用伪元素来清除</p><h1 id="判断一个变量是Array还是object"><a href="#判断一个变量是Array还是object" class="headerlink" title="判断一个变量是Array还是object"></a>判断一个变量是Array还是object</h1><p>  ①typeof、②object.prototype.toString、③instancof、④constructor</p><h1 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h1><p>  ①字面量创建 ②new操作符object创建对象 ③原型链模式</p><h1 id="vue实现数据双向绑定的原理"><a href="#vue实现数据双向绑定的原理" class="headerlink" title="vue实现数据双向绑定的原理"></a>vue实现数据双向绑定的原理</h1><p>  通过数据劫结合发布订阅模式来实现的</p><h1 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h1><p>  v-if：控制元素的销毁与渲染<br>  v-bind：动态绑定属性<br>  v-show：控制元素的显示与隐藏<br>  v-text：渲染文本内容，等价于插值<br>  v-for：for循环<br>  v-once：永远显示数据第一次的值 不受双向响应更新<br>  v-model：数据双向绑定，专门给表单元素绑定的</p><h1 id="vue第一次页面加载会触发那几个钩子"><a href="#vue第一次页面加载会触发那几个钩子" class="headerlink" title="vue第一次页面加载会触发那几个钩子"></a>vue第一次页面加载会触发那几个钩子</h1><p>  创建阶段：beforeCreate 创建前<br>           Created 创建完成<br>  挂载阶段：beforeMount 挂载前<br>           Mounted  挂载完成  </p><h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><p>  节流：一个动作在一段时间内只触发了一次<br>  防抖：一段时间内多次触发，只执行了最后一次</p><h1 id="js原型的constructor是什么意思，有什么作用"><a href="#js原型的constructor是什么意思，有什么作用" class="headerlink" title="js原型的constructor是什么意思，有什么作用"></a>js原型的constructor是什么意思，有什么作用</h1><p>  constructor：构造函数</p><p>axios的实现原理</p><h1 id="写出对象和数组的解构赋值？"><a href="#写出对象和数组的解构赋值？" class="headerlink" title="写出对象和数组的解构赋值？"></a>写出对象和数组的解构赋值？</h1><p>  let [a, b, c] = [1, 2, 3];<br>  console.log(a,b,c)<br>  let { a, b } = { a: 123, b:123};<br>  console.log(a,b)</p><h1 id="对象的原型及原型链"><a href="#对象的原型及原型链" class="headerlink" title="对象的原型及原型链"></a>对象的原型及原型链</h1><p>  （原型链用来描述对象之间的关系）<br>  js是面向对象，每个实例对象都有一个__proto__属性，该属性指向它的原型对象。<br>  当对象在查找属性的时候，自身没有就会根据__proto__向它的原型进行查找，<br>  如果都没有，则向它的原型继续查找，直到查到Object.prototype.proto_为null,这样也就形成了原型链。</p><h1 id="keep-alive是什么？"><a href="#keep-alive是什么？" class="headerlink" title="keep-alive是什么？"></a>keep-alive是什么？</h1><p>  是缓存组件<br>  作用：当页面1跳到页面2，后退到页面1的时候，只会加载缓存之前已经渲染好的页面1，而不需要重新加载页面1<br>  作用：可以在组件切换时，保存其包裹的组件的状态，使其不被销毁，防止多次渲染。</p><h1 id="delete和vue-delete删除数组的区别"><a href="#delete和vue-delete删除数组的区别" class="headerlink" title="delete和vue.delete删除数组的区别"></a>delete和vue.delete删除数组的区别</h1><p>  delete：只是被删除的元素变成了undefined，没有改变它的键值对<br>  vue.delete：是删除了整个数组，改变了它的键值对</p><h1 id="如何优化SPA应用的首屏加载速度慢的问题"><a href="#如何优化SPA应用的首屏加载速度慢的问题" class="headerlink" title="如何优化SPA应用的首屏加载速度慢的问题"></a>如何优化SPA应用的首屏加载速度慢的问题</h1><p>  使用ui的按需加载<br>  路由的懒加载</p><h1 id="阐述一个作用域与作用域链"><a href="#阐述一个作用域与作用域链" class="headerlink" title="阐述一个作用域与作用域链"></a>阐述一个作用域与作用域链</h1><p>  全局作用域和局部作用域<br>  作用域链：如果在当前的作用域中没有找到值，向上查找，直到找到全局作用域</p><h1 id="谈谈This对象的理解"><a href="#谈谈This对象的理解" class="headerlink" title="谈谈This对象的理解"></a>谈谈This对象的理解</h1><p>  this就是谁调用指向谁<br>  ①全局作用域this指向window<br>  ②函数预编译this指向window<br>  ③箭头函数的this指向声明时的环境<br>  ④构造函数中的this指向构造函数实例<br>  ⑤call和apply改变this指向</p><h1 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h1><p>  同步：同步一次只能干一件事<br>  异步：一段时间内可以干多件事情</p><h1 id="为什么异步加载js文件-加载方式"><a href="#为什么异步加载js文件-加载方式" class="headerlink" title="为什么异步加载js文件 加载方式"></a>为什么异步加载js文件 加载方式</h1><p>  什么叫异步加载： 异步加载不会阻塞浏览器的后续操作，即在加载执行js的同时，并行加载其他文件渲染页面。<br>  方法：<br>    defer：script标签中增加defer属性，异步加载<br>    async：script标签中增加async属性，异步加载<br>    动态创建DOM</p><h1 id="列举3种强制类型转换和2种隐式类型转换"><a href="#列举3种强制类型转换和2种隐式类型转换" class="headerlink" title="列举3种强制类型转换和2种隐式类型转换"></a>列举3种强制类型转换和2种隐式类型转换</h1><p>  强制类型：number，parseFloat、parseInt<br>  隐式类型：== === </p><p>==和===的不同</p><h1 id="事件委托什么"><a href="#事件委托什么" class="headerlink" title="事件委托什么"></a>事件委托什么</h1><p>  事件冒泡+事件源对象<br>  优点：不需要循环所有元素一个个绑定，有新的数据时也不需要重新绑定</p><h1 id="如何实现本地存储"><a href="#如何实现本地存储" class="headerlink" title="如何实现本地存储"></a>如何实现本地存储</h1><p>  localStorage，sessionStorage，cookie</p><h1 id="eval是做什么的"><a href="#eval是做什么的" class="headerlink" title="eval是做什么的"></a>eval是做什么的</h1><p>  它的功能是把对应的字符串解析成js来运行</p><h1 id="js种立即执行函数有什么用（什么情况下使用）？"><a href="#js种立即执行函数有什么用（什么情况下使用）？" class="headerlink" title="js种立即执行函数有什么用（什么情况下使用）？"></a>js种立即执行函数有什么用（什么情况下使用）？</h1><p>  js立即执行函数是一种语法，可以让函数在定义后被立即执行</p><p>forEach map reduce filter some every的使用方法及区别？<br>  forEach：没有返回值，<br>  map：有返回值<br>  filter：<br>  some：返回的值是布尔值<br>  every：<br>  reduce：递减</p><h1 id="如何中断ajax请求"><a href="#如何中断ajax请求" class="headerlink" title="如何中断ajax请求"></a>如何中断ajax请求</h1><p>  用abort中断ajax请求</p><h1 id="data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？"><a href="#data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？" class="headerlink" title="data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？"></a>data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？</h1><p>  v-text 和 v-html<br>  v-text：等价于插值，只能渲染文本内容<br>  v-html：是专本用于渲染字符串dom片段的</p><p>如何用vuex使axios获取到的数据替换store中的数据？<br>  vuex的值通过辅助函数拿到，把axios获取到的数据给他</p><h1 id="v-for中的key的理解"><a href="#v-for中的key的理解" class="headerlink" title="v-for中的key的理解"></a>v-for中的key的理解</h1><p>  key属性可以用来提升v-for渲染的效率，加上key相当于有了唯一的id值</p><h1 id="哪些操作会造成内存泄漏"><a href="#哪些操作会造成内存泄漏" class="headerlink" title="哪些操作会造成内存泄漏"></a>哪些操作会造成内存泄漏</h1><p>  闭包<br>  没有及时清除定时器</p><h1 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h1><p>  computed是同步执行，对数据类型没有限制，有新的返回值<br>  watch：执行异步操作，没有返回值，对数组和对象要开启深度监听</p><h1 id="怎么使用computed计算属性？"><a href="#怎么使用computed计算属性？" class="headerlink" title="怎么使用computed计算属性？"></a>怎么使用computed计算属性？</h1><p>在生命周期更新的时候</p><h1 id="普通函数与构造函数有什么区别？"><a href="#普通函数与构造函数有什么区别？" class="headerlink" title="普通函数与构造函数有什么区别？"></a>普通函数与构造函数有什么区别？</h1><p>  普通函数：有返回类型，要符合命名规则<br>  构造函数:没有返回类型，构造函数的函数名必须要与类名一致，用于初始化对象</p><h1 id="route和-router的区别"><a href="#route和-router的区别" class="headerlink" title="$route和$router的区别"></a>$route和$router的区别</h1><p>  $route：访问的是当前的路由信息<br>  $router：实现的是路由跳转</p><h1 id="如何中断ajax请求-1"><a href="#如何中断ajax请求-1" class="headerlink" title="如何中断ajax请求"></a>如何中断ajax请求</h1><p>  用abort</p><h1 id="data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？-1"><a href="#data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？-1" class="headerlink" title="data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？"></a>data中定义的变量以文本形式在页面展示，有几种方法实现？分别是什么？区别是什么？</h1><p>  v-text 和 v-html<br>  v-text：等价于插值，只能渲染文本内容<br>  v-html：是专本用于渲染字符串dom片段的</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
